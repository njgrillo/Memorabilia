@using Memorabilia.Application.Features.Admin
@using Memorabilia.Web.Controls

@inject NavigationManager _navigation
@inject IToastService _toastService

<PopConfirm @ref="_deleteDialog"
            Title="@_deleteTitle"
            ConfirmedChanged="Delete" />
<div class="row">
    <div class="col-md-12" style="text-align: center">
        <h1>@DomainItemTitle</h1>
    </div>
</div>
<br />
<_Table Items="DomainEntities" 
        ItemsPerPage="10"                     
        TItem="DomainViewModel">
    <HeaderTemplate>
        <th scope="col">Name</th>
        <th scope="col">Abbreviation</th>
        <th scope="col"></th>
        <th scope="col"></th>
    </HeaderTemplate>
    <RowTemplate>
        <td>@context.Name</td>
        <td>@context.Abbreviation</td>
        <td>
            <_Tooltip Text="Edit">
                <img class="can-click" 
                        src="images/pencil.png" 
                        height="25" 
                        width="25" 
                        @onclick="@(_ => _navigation.NavigateTo($"{RoutePrefix}/Edit/{context.Id}"))" />
            </_Tooltip>                        
        </td>
        <td>
            <_Tooltip Text="Delete">
                <img class="can-click" 
                        src="images/trash.png" 
                        height="25" 
                        width="25" 
                        @onclick="@(_ => ShowConfirm(context.Id))" />
            </_Tooltip>
        </td>
    </RowTemplate>
</_Table>
<div class="row">
    <div class="col-md-12" style="text-align: center">
        <div class="col-md-12" style="text-align: center">
            <a href="@_addRoute">Add @DomainItemName</a>
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public string AddRoute { get; set; }

    [Parameter]
    public List<DomainViewModel> DomainEntities { get; set; }

    [Parameter]
    public string DomainItemName { get; set; }

    [Parameter]
    public string DomainItemTitle { get; set; }

    [Parameter]
    public EventCallback<SaveDomainViewModel> OnDelete { get; set; }   

    [Parameter]
    public string RoutePrefix { get; set; }

    private string _addRoute; 
    private PopConfirm _deleteDialog;
    private int _deletedItemId;
    private string _deleteTitle;

    protected override Task OnInitializedAsync()
    {
        _addRoute = $"{RoutePrefix}/Edit/0";
        _deleteTitle = $"Delete {DomainItemName}";

        return base.OnInitializedAsync();
    }

    protected async Task Delete(bool confirm)
    {
        if (!confirm)
        {
            _deletedItemId = 0;
            return;
        }

        var deletedItem = DomainEntities.Single(domainEntity => domainEntity.Id == _deletedItemId);
        var viewModel = new SaveDomainViewModel(deletedItem);
        viewModel.IsDeleted = true;

        DomainEntities.Remove(deletedItem);

        await OnDelete.InvokeAsync(viewModel);

        _toastService.ShowSuccess($"{DomainItemName} was deleted successfully!", DomainItemTitle);               
    }

    protected void ShowConfirm(int id)
    {
        _deletedItemId = id;
        _deleteDialog.ShowPop();
    }
}
