@using Memorabilia.Application.Features.Image
@using Memorabilia.Domain.Constants
@using Memorabilia.Domain.Entities
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System 
@using System.IO

@inject IWebHostEnvironment _environment
@inject ProtectedLocalStorage _localStorage
@inject ILogger<_ImageFileSelector> _logger
@inject NavigationManager _navigation

<div class="row">
    <InputFile OnChange="@LoadFiles" accept="image/*" multiple @bind-Value="@Value" />
</div>
<div class="row" hidden="@(!DisplayPreview)">
    @foreach(var image in Value)
    {
        <div style="border: 1px solid black; margin-top: 5%; margin-bottom: 5%; margin-left: 5%; margin-right: 5%;" hidden="@(!HasPrimary)">
            <div class="row" style="margin-top: 5%; margin-bottom: 5%; margin-left: 5%; margin-right: 5%;">
                <div class="col-lg-12" style="text-align: center;">
                    <h4>@(Domain.Constants.ImageType.Find(image.ImageTypeId).Name)</h4>
                </div>
            </div>
            <div class="row" style="margin-top: 1%; margin-bottom: 1%; margin-left: 1%; margin-right: 1%;">
                <div class="col-lg-12" style="text-align: center;">
                    <img src="data:image/jpg;base64,@Convert.ToBase64String(File.ReadAllBytes(image.FilePath))" alt="Image" height="150" width="150">
                </div>
            </div>
            <div class="row" style="margin-top: 1%; margin-bottom: 1%; margin-left: 1%; margin-right: 1%;">
                <div class="col-lg-12" style="text-align: center;" hidden="@(!HasPrimary || image.IsPrimary)">
                    <button class="btn btn-primary" type="button" @onclick="@( _ => SetPrimary(image.FilePath) )">Make Primary</button>
                </div>
                <div class="col-lg-12" style="text-align: center;" hidden="@(!CanRemove)">
                    <button class="btn btn-danger" type="button" @onclick="@( _ => Remove(image.FilePath) )">Remove</button>
                </div>
            </div>
        </div>        
    } 
</div>

@code {
    private IReadOnlyList<IBrowserFile> _files;

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public bool DisplayPreview { get; set; }

    [Parameter]
    public bool HasPrimary { get; set; }

    [Parameter]
    public int? MaximumAllowedFiles { get; set; }

    [Parameter]
    public long? MaximumFileSize { get; set; }

    [Parameter]
    public EventCallback<string> OnPrimarySet { get; set; }  

    [Parameter]
    public EventCallback<string> OnRemove { get; set; }   

    [Parameter]
    public List<SaveImageViewModel> Value { get; set; } = new();

    [Parameter]
    public EventCallback<List<SaveImageViewModel>> ValueChanged { get; set; }    

    protected async Task Remove(string filePath)
    {
        if (File.Exists(filePath))
            File.Delete(filePath);

        await OnRemove.InvokeAsync(filePath);
    }

    protected async Task SetPrimary(string filePath)
    {
        await OnPrimarySet.InvokeAsync(filePath);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        _files = e.GetMultipleFiles(MaximumAllowedFiles ?? 5);

        await Save().ConfigureAwait(false);
    }   

    private async Task Save()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var images = new List<SaveImageViewModel>();
        var imageType = Domain.Constants.ImageType.Primary;

        foreach (var file in _files)
        {
            try
            {
                var directory = Path.Combine(_environment.ContentRootPath,
                                             "wwwroot/userimages", 
                                             userId.Value.ToString());

                if (!Directory.Exists(directory))
                    Directory.CreateDirectory(directory);

                var fileName = Path.GetRandomFileName();
                var path = Path.Combine(directory, fileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(MaximumFileSize ?? 5120000).CopyToAsync(fs);

                images.Add(new SaveImageViewModel(new ImageViewModel(new Domain.Entities.Image($"wwwroot/userimages/{userId.Value}/{fileName}", imageType.Id))));

                imageType = Domain.Constants.ImageType.Secondary;
            }
            catch (Exception ex)
            {
                _logger.LogError("File: {Filename} Error: {Error}", file.Name, ex.Message);
            }               
        }

        Value = images;
        await ValueChanged.InvokeAsync(Value);
    }    
}
