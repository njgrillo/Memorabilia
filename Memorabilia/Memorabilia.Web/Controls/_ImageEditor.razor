@using System 
@using System.IO

<div style="border: 1px solid black; margin-top: 5%; margin-bottom: 5%; margin-left: 5%; margin-right: 5%;" hidden="@(!HasPrimary)">
    <div class="row" style="margin-top: 5%; margin-bottom: 5%; margin-left: 5%; margin-right: 5%;">
        <div class="col-lg-12" style="text-align: center;">
            <h4>@ImageType.Name</h4>
        </div>
    </div>
    <div class="row" style="margin-top: 1%; margin-bottom: 1%; margin-left: 1%; margin-right: 1%;">
        <div class="col-lg-12" style="text-align: center;">
            <img src="data:image/jpg;base64,@Convert.ToBase64String(File.ReadAllBytes(ImageFilePath))" alt="Image" height="150" width="150">
        </div>
    </div>
    <div class="row" style="margin-top: 1%; margin-bottom: 1%; margin-left: 1%; margin-right: 1%;">
        <div class="col-lg-12" style="text-align: center;" hidden="@(!HasPrimary || IsPrimary)">
            <button class="btn btn-primary" type="button" @onclick="@( _ => SetPrimary(ImageFilePath) )">Make Primary</button>
        </div>
        <div class="col-lg-12" style="text-align: center;" hidden="@(!CanRemove)">
            <button class="btn btn-danger" type="button" @onclick="@( _ => Remove(ImageFilePath) )">Remove</button>
        </div>
    </div>
</div>  

@code {
    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public bool HasPrimary { get; set; }

    [Parameter]
    public string ImageFilePath { get; set; }

    [Parameter]
    public Domain.Constants.ImageType ImageType { get; set; }

    [Parameter]
    public bool IsPrimary { get; set; }

    [Parameter]
    public EventCallback<string> OnPrimarySet { get; set; }  

    [Parameter]
    public EventCallback<string> OnRemove { get; set; }  

    protected async Task Remove(string filePath)
    {
        if (File.Exists(filePath))
            File.Delete(filePath);

        await OnRemove.InvokeAsync(filePath).ConfigureAwait(false);
    }

    protected async Task SetPrimary(string filePath)
    {
        await OnPrimarySet.InvokeAsync(filePath).ConfigureAwait(false);
    }
}
