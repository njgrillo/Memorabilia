@typeparam TItem

<div>
    @if (Data != null)
    {
        foreach (var item in Data)
        {
            var Text = TextField?.Invoke(item);
            var Value = Convert.ToInt32(ValueField?.Invoke(item).ToString());
            bool Checked = false;
            if (SelectedValues.Contains(Value))
            {
                Checked = true;
            }
            <input type="checkbox" 
                   checked=@Checked
                   @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />
            @:&nbsp;@Text
            <br />
        }
    }
</div>

@code {
    [Parameter] 
    public IEnumerable<TItem> Data { get; set; }

    [Parameter]
    public List<int> SelectedValues { get; set; }

    [Parameter] 
    public Func<TItem, string> TextField { get; set; }

    [Parameter] 
    public Func<TItem, object> ValueField { get; set; }

    public void CheckboxClicked(int selectedId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!SelectedValues.Contains(selectedId))
            {
                SelectedValues.Add(selectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(selectedId))
            {
                SelectedValues.Remove(selectedId);
            }
        }

        StateHasChanged();
    }
}  