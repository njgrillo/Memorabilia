@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Web.Controls.Person

@inject QueryRouter _queryRouter

@if (CanToggle)
{
    <div class="row">                    
        <div class="col-lg-12">
            <div class="form-group">
                <input type="checkbox" 
                       checked="@_hasPeople" 
                       @onchange="eventArgs => { PersonCheckboxClicked(eventArgs.Value); }" />
                <label for="person">Associate @ItemType.Name with a Person</label>                  
            </div> 
        </div>
    </div> 
}
<div hidden="@(!_displayPeople)">
    @if (CanFilterBySport)
    {
        <div class="row" >
            <div class="col-lg-12">
                <div class="form-group">
                    <input type="checkbox" 
                           checked="@true"                                        
                           @onchange="eventArgs => { PersonFilterCheckboxClicked(eventArgs.Value); }" />
                    <label for="person">Filter by @Sport?.Name</label>
                </div> 
            </div>                                                   
        </div> 
    }     
    <div class="row">                    
        <div class="col-lg-12">
            <div class="form-group">                                                      
                <BlazoredTypeahead @bind-Value="_viewModel" 
                                   SearchMethod="SearchPeople"                     
                                   Placeholder="Search by name...">
                    <SelectedTemplate Context="person">
                        @person.DisplayName
                    </SelectedTemplate>
                    <ResultTemplate Context="person">
                        @person.DisplayName
                    </ResultTemplate>   
                </BlazoredTypeahead> 
                <br />  
                @if (AllowMultiple)
                {
                    <div class="text-right" hidden="@(!_canAdd)">
                        <button type="button" class="btn btn-secondary" @onclick="Add">Add Person</button>
                    </div>
                    <br />  
                    <_Table Items="People.Where(person => !person.IsDeleted).ToList()" 
                            ItemsPerPage="5"   
                            TItem="SavePersonViewModel">
                        <HeaderTemplate>
                            <th scope="col">Person</th>
                            <th scope="col"></th>
                        </HeaderTemplate>
                        <RowTemplate>
                            <td>@context.DisplayName</td>
                            <td>
                                <_Tooltip Text="Delete">
                                    <img class="can-click" 
                                            src="images/trash.png" 
                                            height="25" 
                                            width="25" 
                                            @onclick="@(_ => Remove(context.Id))" />
                                </_Tooltip>
                            </td>
                        </RowTemplate>
                    </_Table>
                }                
            </div> 
        </div>
    </div> 
</div> 

@code {
    [Parameter]
    public bool AllowMultiple { get; set; }

    [Parameter]
    public bool CanFilterBySport { get; set; }

    [Parameter]
    public bool CanToggle { get; set; }

    [Parameter]
    public ItemType ItemType { get; set; }

    [Parameter]
    public List<SavePersonViewModel> People { get; set; } = new();

    [Parameter]
    public SavePersonViewModel SelectedPerson { get; set; }

    [Parameter]
    public EventCallback<SavePersonViewModel> SelectedPersonChanged { get; set; }

    [Parameter]
    public Sport Sport { get; set; }

    SavePersonViewModel _viewModel
    {
        get => SelectedPerson;
        set
        {
            SelectedPerson = value;
            SelectedPersonChanged.InvokeAsync(value);
        }
    } 

    private bool _canAdd = true;
    private bool _displayPeople;
    private bool _hasPeople;
    private IEnumerable<SavePersonViewModel> _people = Enumerable.Empty<SavePersonViewModel>();  

    protected override async Task OnInitializedAsync()
    {
        _displayPeople = !CanToggle || SelectedPerson?.Id > 0 || People.Any();
        _hasPeople = SelectedPerson?.Id > 0 || People.Any();

        await LoadPeople().ConfigureAwait(false);
    } 

    private void Add()
    {
        var person = People.SingleOrDefault(person => person.Id == _viewModel.Id);

        if (person != null)
            person.IsDeleted = false;
        else
            People.Add(_viewModel); 

        _viewModel = new();

        SetCanAdd();
    }    

    private async Task LoadPeople()
    {
        var query = new GetPeople.Query(Sport?.Id ?? null);

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People.Select(person => new SavePersonViewModel(person));
    }    

    private void PersonCheckboxClicked(object isChecked)
    {     
        _displayPeople = CanToggle && (bool)isChecked;

        if (!_displayPeople)
            SelectedPerson = null;

        StateHasChanged();
    } 

    private async Task PersonFilterCheckboxClicked(object isChecked)
    {
        var sportId = (bool)isChecked ? Sport.Id : (int?)null;
        var query = new GetPeople.Query(sportId);

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People.Select(person => new SavePersonViewModel(person));

        StateHasChanged();
    } 

    private void Remove(int personId)
    {
        var person = People.SingleOrDefault(person => person.Id == personId);

        if (person == null)
            return;

        person.IsDeleted = true;

        SetCanAdd();
    }     

    private async Task<IEnumerable<SavePersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetCanAdd()
    {
        _canAdd = AllowMultiple || People.Count(person => !person.IsDeleted) == 0;
    }
}
