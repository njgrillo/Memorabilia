@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Domain.Entities

@inject QueryRouter _queryRouter

<BlazoredTypeahead SearchMethod="SearchPeople" @bind-Value="Value" @oninput="@((e) => { SelectedValue=(string)e.Value;})">
    <SelectedTemplate>
        @context?.DisplayName 
    </SelectedTemplate>
    <ResultTemplate>
        @context?.DisplayName
    </ResultTemplate>
</BlazoredTypeahead>

@code {
    [Parameter]
    public string SelectedValue { get; set; }  

    [Parameter]
    public PersonViewModel Value { get; set; }  

    [Parameter]
    public EventCallback<PersonViewModel> ValueChanged { get; set; }

    private IEnumerable<PersonViewModel> _people = Enumerable.Empty<PersonViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await Load().ConfigureAwait(false);
    } 

    private async Task Load()
    {
        var query = new GetPeople.Query();

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People;
    }

    private async Task OnInputChange(ChangeEventArgs args)
    {
        Value = (PersonViewModel)args.Value;
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task<IEnumerable<PersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.LegalName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    } 
}
