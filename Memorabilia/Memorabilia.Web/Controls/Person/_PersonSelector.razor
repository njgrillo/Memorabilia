@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Web.Controls.Person

@inject QueryRouter _queryRouter

<BlazoredTypeahead @bind-Value="_viewModel" 
                   SearchMethod="SearchPeople"                     
                   Placeholder="Search by name...">
    <SelectedTemplate Context="person">
        @person.DisplayName
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.DisplayName
    </ResultTemplate>   
</BlazoredTypeahead> 
<br />  
<div class="text-right" hidden="@(!_canAdd)">
    <button type="button" class="btn btn-secondary" @onclick="Add">Add Person</button>
</div>
<br />  
<table class="table" style="border: 1px solid black;">
    <thead>
        <tr>
            <th>Person</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var person in People.Where(person => !person.IsDeleted))
        {
            <tr>
                <td>@person.DisplayName</td>
                <td>
                    <_Tooltip Text="Delete">
                        <img class="can-click" 
                                src="images/trash.png" 
                                height="25" 
                                width="25" 
                                @onclick="@(_ => Remove(person.Id))" />
                    </_Tooltip>
                </td>
            </tr>
        }
    </tbody>
</table>
@code {
    [Parameter]
    public bool AllowMultiple { get; set; }

    [Parameter]
    public List<SavePersonViewModel> People { get; set; } = new();

    private bool _canAdd = true;
    private IEnumerable<SavePersonViewModel> _people = Enumerable.Empty<SavePersonViewModel>();  
    private SavePersonViewModel _viewModel = new SavePersonViewModel();    

    protected override async Task OnInitializedAsync()
    {
        await LoadPeople().ConfigureAwait(false);
    } 

    private void Add()
    {
        var person = People.SingleOrDefault(person => person.Id == _viewModel.Id);

        if (person != null)
            person.IsDeleted = false;
        else
            People.Add(_viewModel); 

        _viewModel = new();

        SetCanAdd();
    }    

    private async Task LoadPeople()
    {
        var query = new GetPeople.Query();

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People.Select(person => new SavePersonViewModel(person));
    }

    private void Remove(int personId)
    {
        var person = People.SingleOrDefault(person => person.Id == personId);

        if (person == null)
            return;

        person.IsDeleted = true;

        SetCanAdd();
    }     

    private async Task<IEnumerable<SavePersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetCanAdd()
    {
        _canAdd = AllowMultiple || People.Count(person => !person.IsDeleted) == 0;
    }
}
