@using Memorabilia.Application.Features.Admin

@inject NavigationManager _navigation
@inject IToastService _toastService

<_Page OnLoad="Load">
    <Content>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <h1>@_viewModel.PageTitle</h1>
            </div>
        </div>
        <br />
        <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
            <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
                <div class="col-lg-12" style="text-align: center">
                    <img src="@_viewModel.ImagePath" alt="Image" height="150" width="150" />
                </div>
                <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="_viewModel.Name" />
                    </div>
                    <div class="form-group">
                        <label for="abbreviation">Abbreviation</label>
                        <InputText id="abbreviation" class="form-control" @bind-Value="_viewModel.Abbreviation" />
                    </div>
                    <div class="text-right">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
            <div class="row">
                <div class="col-md-12" style="text-align: center">
                    <a href="@_viewModel.NavigationPath">Back</a>
                </div>
            </div>
            <br />
        </div>
    </Content>
</_Page>

@code {
    [Parameter]
    public SaveDomainViewModel DomainItem
    {
        get
        {
            return _viewModel;
        }
        set
        {
            _viewModel = value;
        }
    }

    [Parameter]
    public EventCallback OnLoad { get; set; } 

    [Parameter]
    public EventCallback<SaveDomainViewModel> OnSave { get; set; }  

    private EditModeType _editModeType;
    private SaveDomainViewModel _viewModel;

    protected async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(_viewModel).ConfigureAwait(false);

        _navigation.NavigateTo(_viewModel.NavigationPath);

        _toastService.ShowSuccess($"{_viewModel.DomainTypeName} was {(_editModeType == EditModeType.Add ? "added" : "updated")} successfully!", _viewModel.PageTitle);
    }  

    protected async Task Load()
    {
        _editModeType = _viewModel.Id > 0 ? EditModeType.Update : EditModeType.Add;

        if (_viewModel.Id == 0)
            return;

        await OnLoad.InvokeAsync().ConfigureAwait(false);
    }
}
