@using Memorabilia.Application.Features
@using Memorabilia.Application.Features.Admin.Franchise
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Admin.SportLeagueLevel
@using Memorabilia.Application.Features.Admin.Team
@using Memorabilia.Application.Features.Autograph
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Web.Controls.AcquisitionType
@using Memorabilia.Web.Controls.Brand
@using Memorabilia.Web.Controls.Color
@using Memorabilia.Web.Controls.Condition
@using Memorabilia.Web.Controls.Franchise
@using Memorabilia.Web.Controls.GameStyleType
@using Memorabilia.Web.Controls.ItemType
@using Memorabilia.Web.Controls.LevelType
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.PrivacyType
@using Memorabilia.Web.Controls.PurchaseType
@using Memorabilia.Web.Controls.Size
@using Memorabilia.Web.Controls.Sport
@using Memorabilia.Web.Controls.SportLeagueLevel
@using Memorabilia.Web.Controls.Spot
@using Memorabilia.Web.Controls.Team
@using Memorabilia.Web.Controls.WritingInstrument
@using System.Linq.Expressions

<div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
    <EditForm Model="Items" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="row">
                <div class="col-md-6" style="text-align: left">
                    <h3>Memorabilia Filters</h3>
                </div>
                <div class="col-md-6" style="text-align: left">
                    <h3>Autograph Filters</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="itemType">Item Type</label>
                        <_ItemTypeDropDown @bind-Value="@_itemTypeId" 
                                           @bind-Value:event="ValueChanged" /> 
                    </div>
                </div>    
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="brand">Brand</label>
                        <_BrandDropDown @bind-Value="@_brandId" 
                                        @bind-Value:event="ValueChanged" /> 
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaAcquisitionType">Acquisition Type</label>
                        <_AcquisitionTypeDropDown @bind-Value="@_memorabiliaAcquisitionTypeId" 
                                                  @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographPerson">Person</label>
                        <_PersonSelector SelectedPerson="_autographPerson"
                                         SelectedPersonChanged="SelectedAutographPersonChanged" />  
                    </div>                    
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="writingInstrument">Writing Instrument</label>
                        <_WritingInstrumentDropDown @bind-Value="@_writingInstrumentId" 
                                                    @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographAcquisitionType">Acquisition Type</label>
                        <_AcquisitionTypeDropDown @bind-Value="@_writingInstrumentId" 
                                                  @bind-Value:event="ValueChanged"
                                                  IsAutograph="true" /> 
                    </div>
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaCondition">Condition</label>
                        <_ConditionDropDown @bind-Value="@_memorabiliaConditionId" 
                                            @bind-Value:event="ValueChanged" /> 
                    </div>
                </div>    
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="size">Size</label>
                        <_SizeDropDown @bind-Value="@_sizeId" 
                                       @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaAcquiredDate">Acquired Date</label>
                        <Input class="form-control"
                               type="date" 
                               @bind-Value="@_memorabiliaAcquiredDate" 
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographCondition">Condition</label>
                        <_ConditionDropDown @bind-Value="@_autographConditionId" 
                                            @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="color">Color</label>
                        <_ColorDropDown @bind-Value="@_colorId" 
                                        @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographAcquiredDate">Acquired Date</label>
                        <Input class="form-control"
                               type="date" 
                               @bind-Value="@_autographAcquiredDate" 
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabilia">Grade</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_memorabiliaGrade"
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaEstimatedValue">Estimated Value ($)</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_memorabiliaEstimatedValue" 
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaCost">Cost ($)</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_memorabiliaCost"
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographGrade">Grade</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_autographGrade"
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div>                 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="spot">Spot</label>
                        <_SpotDropDown @bind-Value="@_spotId" 
                                       @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographCost">Cost ($)</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_autographCost"
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="levelType">Level Type</label>
                        <_LevelTypeDropDown @bind-Value="@_levelTypeId" 
                                            @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="gameStyleType">Game Style</label>
                        <_GameStyleTypeDropDown @bind-Value="@_gameStyleTypeId" 
                                                @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaPurchaseType">Purchase Type</label>
                        <_PurchaseTypeDropDown @bind-Value="@_memorabiliaPurchaseTypeId" 
                                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2" />
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographEstimatedValue">Estimated Value ($)</label>
                        <Input class="form-control"
                               type="number"
                               @bind-Value="@_autographEstimatedValue" 
                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="autographPurchaseType">Purchase Type</label>
                        <_PurchaseTypeDropDown @bind-Value="@_autographPurchaseTypeId" 
                                               @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="memorabiliaPerson">Person</label>
                        <_PersonSelector SelectedPerson="_memorabiliaPerson"
                                         SelectedPersonChanged="SelectedMemorabiliaPersonChanged" />  
                    </div>                    
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="sport">Sport</label>
                        <_SportDropDown @bind-Value="@_sportId" 
                                        @bind-Value:event="ValueChanged" />  
                    </div>                    
                </div> 
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="sportLeagueLevel">Sport League Level</label>
                        <_SportLeagueLevelDropDown @bind-Value="@_sportLeagueLevelId" 
                                                   @bind-Value:event="ValueChanged" />  
                    </div>                    
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label for="franchise">Franchise</label>
                        <_FranchiseDropDown @bind-Value="@_franchiseId" 
                                            @bind-Value:event="ValueChanged" />  
                    </div>                    
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        <label for="privacyType">Privacy Type</label>
                        <_PrivacyTypeDropDown @bind-Value="@_privacyTypeId" 
                                              @bind-Value:event="ValueChanged" /> 
                    </div>
                </div> 
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        <label for="memorabiliaTeam">Team</label>
                        <_TeamSelector SelectedTeam="_memorabiliaTeam"
                                       SelectedTeamChanged="SelectedMemorabiliaTeamChanged" />  
                    </div>                    
                </div>
            </div>
            <div class="row" style="text-align: center">
                <div class="col-lg-12">
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" onclick="@HandleValidSubmit">Filter</button>
                        <button type="button" class="btn btn-secondary" onclick="@ResetCriteria">Reset Criteria</button>
                    </div>
                </div>        
            </div>
        </div>        
    </EditForm>
</div>

@code {
    [Parameter]
    public List<MemorabiliaItemViewModel> Items { get; set; }

    [Parameter]
    public List<MemorabiliaItemViewModel> Results { get; set; }

    [Parameter]
    public EventCallback<List<MemorabiliaItemViewModel>> ResultsChanged { get; set; }

    private List<AutographViewModel> _autographs => Items.SelectMany(item => item.Autographs).ToList();

    private bool _hasFilter => _autographAcquiredDate.HasValue ||
                               _autographAcquisitionTypeId > 0 ||
                               _autographConditionId > 0 ||
                               _autographCost.HasValue ||
                               _autographEstimatedValue.HasValue ||
                               _autographGrade.HasValue ||
                               _autographPerson?.Id > 0 ||
                               _autographPurchaseTypeId > 0 ||
                               _brandId > 0 ||
                               _colorId > 0 ||    
                               _franchiseId > 0 ||
                               _gameStyleTypeId > 0 ||
                               _itemTypeId > 0 ||
                               _levelTypeId > 0 ||
                               _memorabiliaAcquiredDate.HasValue ||
                               _memorabiliaAcquisitionTypeId > 0 ||
                               _memorabiliaConditionId > 0 ||
                               _memorabiliaCost.HasValue ||
                               _memorabiliaEstimatedValue.HasValue ||
                               _memorabiliaGrade.HasValue ||
                               _memorabiliaPerson?.Id > 0 ||
                               _memorabiliaPurchaseTypeId > 0 ||
                               _memorabiliaTeam?.Id > 0 ||
                               _privacyTypeId > 0 ||
                               _sizeId > 0 ||
                               _sportId > 0 ||
                               _sportLeagueLevelId > 0 ||
                               _spotId > 0 ||
                               _writingInstrumentId > 0;

    private static DateTime? _autographAcquiredDate;
    private static int _autographAcquisitionTypeId;
    private static int _autographConditionId;
    private static decimal? _autographCost;
    private static decimal? _autographEstimatedValue;
    private static int? _autographGrade;
    private static SavePersonViewModel _autographPerson;
    private static int _autographPurchaseTypeId;
    private static int _brandId;
    private static int _colorId;
    private static int _franchiseId;
    private static int _gameStyleTypeId;
    private static int _itemTypeId;
    private static int _levelTypeId;
    private static DateTime? _memorabiliaAcquiredDate;
    private static int _memorabiliaAcquisitionTypeId;
    private static int _memorabiliaConditionId;
    private static decimal? _memorabiliaCost;
    private static decimal? _memorabiliaEstimatedValue;
    private static int? _memorabiliaGrade;
    private static SavePersonViewModel _memorabiliaPerson;
    private static int _memorabiliaPurchaseTypeId;
    private static SaveTeamViewModel _memorabiliaTeam;
    private static int _privacyTypeId;
    private static int _sizeId;
    private static int _sportId;
    private static int _sportLeagueLevelId;
    private static int _spotId;
    private static int _writingInstrumentId;

    private static Expression<Func<AutographViewModel, bool>> _autographAcquiredDateExpression = 
        autograph => autograph.AcquisitionDate == _autographAcquiredDate;
    private static Expression<Func<AutographViewModel, bool>> _autographAcquisitionTypeExpression = 
        autograph => autograph.AcquisitionTypeId == _autographAcquisitionTypeId;
    private static Expression<Func<AutographViewModel, bool>> _autographConditionExpression = 
        autograph => autograph.ConditionId == _autographConditionId;
    private static Expression<Func<AutographViewModel, bool>> _autographCostExpression = 
        autograph => autograph.Cost == _autographCost;
    private static Expression<Func<AutographViewModel, bool>> _autographEstimatedValueExpression = 
        autograph => autograph.EstimatedValue == _autographEstimatedValue;
    private static Expression<Func<AutographViewModel, bool>> _autographGradeExpression = 
        autograph => autograph.Grade == _autographGrade;
    private static Expression<Func<AutographViewModel, bool>> _autographPersonExpression = 
        autograph => autograph.PersonId == _autographPerson.Id;
    private static Expression<Func<AutographViewModel, bool>> _autographPurchaseTypeExpression = 
        autograph => autograph.PurchaseTypeId == _autographPurchaseTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _brandExpression = 
        item => item.BrandId == _brandId;
    private static Expression<Func<AutographViewModel, bool>> _colorExpression = 
        autograph => autograph.ColorId == _colorId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _franchiseExpression = 
        item => item.Franchises.Select(franchise => franchise.Id).Contains(_franchiseId);
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _gameStyleTypeExpression = 
        item => item.GameStyleTypeId == _gameStyleTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _itemTypeExpression = 
        item => item.ItemTypeId == _itemTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _levelTypeExpression = 
        item => item.LevelTypeId == _levelTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaAcquisitionTypeExpression = 
        item => item.Acquisition.AcquisitionTypeId == _memorabiliaAcquisitionTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaAcquiredDateExpression = 
        item => item.Acquisition.AcquiredDate == _memorabiliaAcquiredDate;    
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaConditionExpression = 
        item => item.ConditionId == _memorabiliaConditionId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaCostExpression = 
        item => item.Acquisition.Cost == _memorabiliaCost;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaEstimatedValueExpression = 
        item => item.EstimatedValue == _memorabiliaEstimatedValue; 
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaPersonExpression = 
        item => item.People.Select(person => person.PersonId).Contains(_memorabiliaPerson.Id);
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaPurchaseTypeExpression = 
        item => item.PurchaseTypeId == _memorabiliaPurchaseTypeId; 
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _memorabiliaTeamExpression = 
        item => item.Teams.Select(team => team.TeamId).Contains(_memorabiliaTeam.Id);
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _privacyTypeExpression = 
        item => item.PrivacyTypeId == _privacyTypeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _sizeExpression = 
        item => item.SizeId == _sizeId;
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _sportExpression = 
        item => item.Sports.Select(sport => sport.SportId).Contains(_sportId);
    private static Expression<Func<MemorabiliaItemViewModel, bool>> _sportLeagueLevelExpression = 
        item => item.SportLeagueLevels.Select(sportLeagueLevel => sportLeagueLevel.Id).Contains(_sportLeagueLevelId);
    private static Expression<Func<AutographViewModel, bool>> _spotExpression = 
        autograph => autograph.SpotId == _spotId;
    private static Expression<Func<AutographViewModel, bool>> _writingInstrumentExpression = 
        autograph => autograph.WritingInstrumentId == _writingInstrumentId;

    protected async Task HandleValidSubmit()
    {
        await FilterResults().ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!_hasFilter)
            return;

        await FilterResults().ConfigureAwait(false);
    }

    protected async Task ResetCriteria()
    {
        _autographAcquiredDate = null;
        _autographAcquisitionTypeId = 0;
        _autographConditionId = 0;
        _autographCost = null;
        _autographEstimatedValue = null; 
        _autographGrade = null;
        _autographPerson = null;
        _autographPurchaseTypeId = 0;
        _brandId = 0;
        _colorId = 0;
        _franchiseId = 0;
        _gameStyleTypeId = 0;
        _itemTypeId = 0;
        _levelTypeId = 0;
        _memorabiliaAcquiredDate = null;
        _memorabiliaAcquisitionTypeId = 0;
        _memorabiliaConditionId = 0;
        _memorabiliaCost = null;
        _memorabiliaEstimatedValue = null;
        _memorabiliaGrade = null;
        _memorabiliaPerson = null;
        _memorabiliaPurchaseTypeId = 0;
        _memorabiliaTeam = null;
        _privacyTypeId = 0;
        _sizeId = 0;
        _sportId = 0;
        _sportLeagueLevelId = 0;
        _spotId = 0;
        _writingInstrumentId = 0;

        await FilterResults().ConfigureAwait(false);
    }

    private List<AutographViewModel> FilterAutographs()
    {
        var predicate = PredicateBuilder.True<AutographViewModel>();

        if (_autographAcquiredDate.HasValue)
            predicate = predicate.And(_autographAcquiredDateExpression); 

        if (_autographAcquisitionTypeId > 0)
            predicate = predicate.And(_autographAcquisitionTypeExpression); 

        if (_autographConditionId > 0)
            predicate = predicate.And(_autographConditionExpression); 

        if (_autographCost.HasValue)
            predicate = predicate.And(_autographCostExpression); 

        if (_autographEstimatedValue.HasValue)
            predicate = predicate.And(_autographEstimatedValueExpression);

        if (_autographGrade.HasValue)
            predicate = predicate.And(_autographGradeExpression); 

        if (_autographPerson?.Id > 0)
            predicate = predicate.And(_autographPersonExpression); 

        if (_autographPurchaseTypeId > 0)
            predicate = predicate.And(_autographPurchaseTypeExpression); 

        if (_colorId > 0)
            predicate = predicate.And(_colorExpression);

        if (_spotId > 0)
            predicate = predicate.And(_spotExpression);

        if (_writingInstrumentId > 0)
            predicate = predicate.And(_writingInstrumentExpression);

        return _autographs.AsQueryable().Where(predicate).ToList();
    }

    private List<MemorabiliaItemViewModel> FilterMemorabiliaItems()
    {
        var predicate = PredicateBuilder.True<MemorabiliaItemViewModel>();

        if (_brandId > 0)
            predicate = predicate.And(_brandExpression);
            
        if (_franchiseId > 0)
            predicate = predicate.And(_franchiseExpression); 

        if (_gameStyleTypeId > 0)
            predicate = predicate.And(_gameStyleTypeExpression); 

        if (_itemTypeId > 0)
            predicate = predicate.And(_itemTypeExpression); 

        if (_levelTypeId > 0)
            predicate = predicate.And(_levelTypeExpression); 

        if (_memorabiliaAcquiredDate.HasValue)
            predicate = predicate.And(_memorabiliaAcquiredDateExpression);

        if (_memorabiliaAcquisitionTypeId > 0)
            predicate = predicate.And(_memorabiliaAcquisitionTypeExpression);

        if (_memorabiliaConditionId > 0)
            predicate = predicate.And(_memorabiliaConditionExpression);

        if (_memorabiliaCost.HasValue)
            predicate = predicate.And(_memorabiliaCostExpression);

        if (_memorabiliaEstimatedValue.HasValue)
            predicate = predicate.And(_memorabiliaEstimatedValueExpression);

        if (_memorabiliaPerson?.Id > 0)
            predicate = predicate.And(_memorabiliaPersonExpression);

        if (_memorabiliaPurchaseTypeId > 0)
            predicate = predicate.And(_memorabiliaPurchaseTypeExpression);

        if (_memorabiliaTeam?.Id > 0)
            predicate = predicate.And(_memorabiliaTeamExpression);

        if (_privacyTypeId > 0)
            predicate = predicate.And(_privacyTypeExpression);

        if (_sizeId > 0)
            predicate = predicate.And(_sizeExpression);

        if (_sportId > 0)
            predicate = predicate.And(_sportExpression);

        if (_sportLeagueLevelId > 0)
            predicate = predicate.And(_sportLeagueLevelExpression);

        return Items.AsQueryable().Where(predicate).ToList();
    }

    private async Task FilterResults()
    {
        var filteredMemorabilaItems = FilterMemorabiliaItems();
        var autographResults = FilterAutographs();
        var memorabiliaIds = autographResults.Select(x => x.MemorabiliaId).ToArray();

        Results = filteredMemorabilaItems.Where(item => memorabiliaIds.Contains(item.Id)).ToList();

        await ResultsChanged.InvokeAsync(Results).ConfigureAwait(false);
    }

    private void SelectedAutographPersonChanged(SavePersonViewModel person)
    {
        _autographPerson = person;
    }

    private void SelectedMemorabiliaPersonChanged(SavePersonViewModel person)
    {
        _memorabiliaPerson = person;
    }

    private void SelectedMemorabiliaTeamChanged(SaveTeamViewModel team)
    {
        _memorabiliaTeam = team;
    }
}
