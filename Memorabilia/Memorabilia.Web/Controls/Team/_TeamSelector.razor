@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Team
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls.Team

@inject QueryRouter _queryRouter

<BlazoredTypeahead @bind-Value="_viewModel"
                    SearchMethod="SearchTeams"                   
                    Placeholder="Search by team...">
    <SelectedTemplate Context="team">
        @team.DisplayName
    </SelectedTemplate>
    <ResultTemplate Context="team">
        @team.DisplayName
    </ResultTemplate>   
</BlazoredTypeahead> 
<br />  
<div hidden="@(!AllowMultiple)">
    <div class="text-right" hidden="@(!_canAdd)">
        <button type="button" class="btn btn-secondary" @onclick="Add">Add Team</button>
    </div>
    <br />  
    <_Table Items="Teams.Where(team => !team.IsDeleted).ToList()" 
            ItemsPerPage="25"   
            TItem="SaveTeamViewModel">
        <HeaderTemplate>
            <th scope="col">Team</th>
            <th scope="col"></th>
        </HeaderTemplate>
        <RowTemplate>
            <td>@context.DisplayName</td>
            <td>
                <_Tooltip Text="Delete">
                    <img class="can-click" 
                         src="images/trash.png" 
                         height="25" 
                         width="25" 
                         @onclick="@(_ => Remove(context.Id))" />
                </_Tooltip>
            </td>
        </RowTemplate>
    </_Table>
</div>

@code {
    [Parameter]
    public bool AllowMultiple { get; set; }

    [Parameter]
    public SportLeagueLevel SportLeagueLevel { get; set; }

    [Parameter]
    public SaveTeamViewModel SelectedTeam { get; set; }

    [Parameter]
    public EventCallback<SaveTeamViewModel> SelectedTeamChanged { get; set; }

    [Parameter]
    public List<SaveTeamViewModel> Teams { get; set; } = new();    

    SaveTeamViewModel _viewModel
    {
        get => SelectedTeam;
        set
        {
            SelectedTeam = value;
            SelectedTeamChanged.InvokeAsync(value);
        }
    } 

    private bool _canAdd = true;
    private IEnumerable<SaveTeamViewModel> _teams = Enumerable.Empty<SaveTeamViewModel>();  

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams().ConfigureAwait(false);
    } 

    private void Add()
    {        
        var team = Teams.SingleOrDefault(team => team.Id == _viewModel.Id);

        if (team != null)
            team.IsDeleted = false;
        else
            Teams.Add(_viewModel);

        _viewModel = new();

        SetCanAdd();
    }

    private async Task LoadTeams()
    {
        var query = new GetTeams.Query(sportLeagueLevelId:SportLeagueLevel?.Id);

        _teams = (await _queryRouter.Send(query).ConfigureAwait(false)).Teams.Select(team => new SaveTeamViewModel(team));
    }

    private void Remove(int teamId)
    {
        var team = _teams.SingleOrDefault(team => team.Id == teamId);

        if (team == null)
            return;

        team.IsDeleted = true;   
        
        SetCanAdd();
    } 

    private async Task<IEnumerable<SaveTeamViewModel>> SearchTeams(string searchText)
    {
        return await Task.FromResult(_teams.Where(team => team.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetCanAdd()
    {
        _canAdd = AllowMultiple || Teams.Count(team => !team.IsDeleted) == 0;
    }
}
