@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Team
@using Memorabilia.Domain.Entities

@inject QueryRouter _queryRouter

<BlazoredTypeahead SearchMethod="SearchTeams" @bind-Value="Value" @oninput="@((e) => { SelectedValue=(string)e.Value;})">
    <SelectedTemplate>
        @context?.DisplayName 
    </SelectedTemplate>
    <ResultTemplate>
        @context?.DisplayName
    </ResultTemplate>
</BlazoredTypeahead>

@code {
    [Parameter]
    public string SelectedValue { get; set; }  

    [Parameter]
    public TeamViewModel Value { get; set; }  

    [Parameter]
    public EventCallback<TeamViewModel> ValueChanged { get; set; }

    private IEnumerable<TeamViewModel> _teams = Enumerable.Empty<TeamViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await Load().ConfigureAwait(false);
    } 

    private async Task Load()
    {
        var query = new GetTeams.Query();

        _teams = (await _queryRouter.Send(query).ConfigureAwait(false)).Teams;
    }

    private async Task OnInputChange(ChangeEventArgs args)
    {
        Value = (TeamViewModel)args.Value;
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task<IEnumerable<TeamViewModel>> SearchTeams(string searchText)
    {
        return await Task.FromResult(_teams.Where(team => team.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    } 
}
