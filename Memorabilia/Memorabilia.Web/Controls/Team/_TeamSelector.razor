@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Team
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls.Team

@inject QueryRouter _queryRouter

@if (CanToggle)
{
    <div class="row">                    
        <div class="col-lg-12">
            <div class="form-group">
                <input type="checkbox" 
                       checked="@_hasTeams" 
                       @onchange="eventArgs => { TeamCheckboxClicked(eventArgs.Value); }" />
                <label for="person">Associate @ItemType.Name with a Team</label>                  
            </div> 
        </div>
    </div> 
}
<div class="row" hidden="@(!_displayTeams)">                    
    <div class="col-lg-12">
        <div class="form-group">
                <BlazoredTypeahead @bind-Value="_viewModel"
                                   SearchMethod="SearchTeams"                   
                                   Placeholder="Search by team...">
                    <SelectedTemplate Context="team">
                        @team.DisplayName
                    </SelectedTemplate>
                    <ResultTemplate Context="team">
                        @team.DisplayName
                    </ResultTemplate>   
                </BlazoredTypeahead> 
                <br />  
                @if (AllowMultiple){
                    <div class="text-right" hidden="@(!_canAdd)">
                        <button type="button" class="btn btn-secondary" @onclick="Add">Add Team</button>
                    </div>
                    <br />  
                    <_Table Items="Teams.Where(team => !team.IsDeleted).ToList()" 
                            ItemsPerPage="25"   
                            TItem="SaveTeamViewModel">
                        <HeaderTemplate>
                            <th scope="col">Team</th>
                            <th scope="col"></th>
                        </HeaderTemplate>
                        <RowTemplate>
                            <td>@context.DisplayName</td>
                            <td>
                                <_Tooltip Text="Delete">
                                    <img class="can-click" 
                                            src="images/trash.png" 
                                            height="25" 
                                            width="25" 
                                            @onclick="@(_ => Remove(context.Id))" />
                                </_Tooltip>
                            </td>
                        </RowTemplate>
                    </_Table>
                }                           
        </div> 
    </div>
</div> 


@code {
    [Parameter]
    public bool AllowMultiple { get; set; }

    [Parameter]
    public bool CanToggle { get; set; }

    [Parameter]
    public ItemType ItemType { get; set; }

    [Parameter]
    public SportLeagueLevel SportLeagueLevel { get; set; }

    [Parameter]
    public SaveTeamViewModel SelectedTeam { get; set; }

    [Parameter]
    public EventCallback<SaveTeamViewModel> SelectedTeamChanged { get; set; }

    [Parameter]
    public List<SaveTeamViewModel> Teams { get; set; } = new();    

    SaveTeamViewModel _viewModel
    {
        get => SelectedTeam;
        set
        {
            SelectedTeam = value;
            SelectedTeamChanged.InvokeAsync(value);
        }
    } 

    private bool _canAdd = true;
    private bool _displayTeams;
    private bool _hasTeams;
    private IEnumerable<SaveTeamViewModel> _teams = Enumerable.Empty<SaveTeamViewModel>();  

    protected override async Task OnInitializedAsync()
    {
        _displayTeams = !CanToggle || SelectedTeam?.Id > 0 || Teams.Any();
        _hasTeams = SelectedTeam?.Id > 0 || Teams.Any();

        await LoadTeams().ConfigureAwait(false);
    } 

    private void Add()
    {        
        var team = Teams.SingleOrDefault(team => team.Id == _viewModel.Id);

        if (team != null)
            team.IsDeleted = false;
        else
            Teams.Add(_viewModel);

        _viewModel = new();

        SetCanAdd();
    }

    private async Task LoadTeams()
    {
        var query = new GetTeams.Query(sportLeagueLevelId:SportLeagueLevel?.Id);

        _teams = (await _queryRouter.Send(query).ConfigureAwait(false)).Teams.Select(team => new SaveTeamViewModel(team));
    }

    private void Remove(int teamId)
    {
        var team = _teams.SingleOrDefault(team => team.Id == teamId);

        if (team == null)
            return;

        team.IsDeleted = true;   
        
        SetCanAdd();
    } 

    private async Task<IEnumerable<SaveTeamViewModel>> SearchTeams(string searchText)
    {
        return await Task.FromResult(_teams.Where(team => team.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetCanAdd()
    {
        _canAdd = AllowMultiple || Teams.Count(team => !team.IsDeleted) == 0;
    }

    private void TeamCheckboxClicked(object isChecked)
    {
        _displayTeams = CanToggle && (bool)isChecked;

        if (!_displayTeams)
            SelectedTeam = null;

        StateHasChanged();
    }
}
