@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Team
@using Memorabilia.Web.Controls.Team

@inject QueryRouter _queryRouter

<BlazoredTypeahead SearchMethod="SearchTeams"
                   @bind-Value="@_viewModel"
                   Placeholder="Search by team...">
    <SelectedTemplate Context="team">
        @team.DisplayName
    </SelectedTemplate>
    <ResultTemplate Context="team">
        @team.DisplayName
    </ResultTemplate>   
</BlazoredTypeahead> 
<br />  
<div class="text-right">
    <button type="button" class="btn btn-secondary" @onclick="Add">Add Team</button>
</div>
<br />  
<table class="table" style="border: 1px solid black;">
    <thead>
        <tr>
            <th>Team</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var team in Teams.Where(team => !team.IsDeleted))
        {
            <tr>
                <td>@team.DisplayName</td>
                <td>
                    <_Tooltip Text="Delete">
                        <img class="can-click" 
                             src="images/trash.png" 
                             height="25" 
                             width="25" 
                             @onclick="@(_ => Remove(team.Id))" />
                    </_Tooltip>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<SaveTeamViewModel> Teams { get; set; } = new();

    private IEnumerable<SaveTeamViewModel> _teams = Enumerable.Empty<SaveTeamViewModel>();  
    private SaveTeamViewModel _viewModel = new SaveTeamViewModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams().ConfigureAwait(false);
    } 

    private void Add()
    {        
        Teams.Add(_viewModel);

        _viewModel = new SaveTeamViewModel();
    }

    private async Task LoadTeams()
    {
        var query = new GetTeams.Query();

        _teams = (await _queryRouter.Send(query).ConfigureAwait(false)).Teams.Select(team => new SaveTeamViewModel(team));
    }

    private void Remove(int teamId)
    {
        var team = _teams.SingleOrDefault(team => team.Id == teamId);

        if (team == null)
            return;

        team.IsDeleted = true;                                                                        
    } 

    private async Task<IEnumerable<SaveTeamViewModel>> SearchTeams(string searchText)
    {
        return await Task.FromResult(_teams.Where(team => team.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }
}
