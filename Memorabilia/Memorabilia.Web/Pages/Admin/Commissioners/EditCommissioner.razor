@page "/Commissioners/Edit"
@page "/Commissioners/Edit/{id:int}"

@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin
@using Memorabilia.Application.Features.Admin.Commissioner
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.SportLeagueLevel

@inject CommandRouter _commandRouter
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

<_Page OnLoad="OnLoad">
    <Content>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <h1>@_viewModel.PageTitle</h1>
            </div>
        </div>
        <br />
        <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
            <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
                <div class="col-lg-12" style="text-align: center">
                    <img src="images/commissioners.jpg" alt="Image" height="150" width="150" />
                </div>
                <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="sportLeague">Sport League</label>
                        <_SportLeagueLevelDropDown @bind-Value="@_viewModel.SportLeagueLevelId"
                                                   @bind-Value:event="ValueChanged" /> 
                    </div>
                    <div class="form-group">
                        <label for="person">Person</label>
                        <BlazoredTypeahead SearchMethod="SearchPeople"
                                           @bind-Value="_viewModel.Person"
                                           Placeholder="Search by name...">
                            <SelectedTemplate Context="person">
                                @person.DisplayName
                            </SelectedTemplate>
                            <ResultTemplate Context="person">
                                @person.DisplayName
                            </ResultTemplate>
                        </BlazoredTypeahead> 
                    </div>
                    <div class="form-group">
                        <label for="beginYear">Begin Year</label>
                        <InputNumber id="beginYear" @bind-Value="_viewModel.BeginYear" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="endYear">End Year</label>
                        <InputNumber id="endYear" @bind-Value="_viewModel.EndYear" class="form-control" />
                    </div>
                    <div class="text-right">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
            <div class="row">
                <div class="col-md-12" style="text-align: center">
                    <a href="@_viewModel.RoutePrefix">Back</a>
                </div>
            </div>
            <br />
        </div>
    </Content>
</_Page>

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<PersonViewModel> _people = Enumerable.Empty<PersonViewModel>();
    private SaveCommissionerViewModel _viewModel = new SaveCommissionerViewModel();

    protected async Task HandleValidSubmit()
    {
        await _commandRouter.Send(new SaveCommissioner.Command(_viewModel)).ConfigureAwait(false);

        _navigation.NavigateTo(_viewModel.RoutePrefix);
        _toastService.ShowSuccess($"{_viewModel.ItemTitle} was saved successfully!", _viewModel.PageTitle);
    }

    protected async Task OnLoad()
    {
        await LoadPeople().ConfigureAwait(false);

        if (Id == 0)
            return;

        _viewModel = new SaveCommissionerViewModel(await _queryRouter.Send(new GetCommissioner.Query(Id)).ConfigureAwait(false));
    }

    private async Task LoadPeople()
    {
        _people = (await _queryRouter.Send(new GetPeople.Query()).ConfigureAwait(false)).People;
    }

    private async Task<IEnumerable<PersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }
}


