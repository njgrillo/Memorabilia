@page "/ItemTypeAuthenticTypes/Edit/{id:int}"

@using Memorabilia.Application.Features.Admin
@using Memorabilia.Application.Features.Admin.ItemTypeAuthenticType
@using Memorabilia.Web.Controls.AuthenticType

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/authentictypes.png" alt="Image" height="150" width="150" />
            </div>
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="authenticType">AuthenticType</label>
                    <_AuthenticTypeDropDown @bind-Value="@_viewModel.AuthenticTypeId" 
                                            @bind-Value:event="ValueChanged" /> 
                </div>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="ItemTypeAuthenticTypes">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private SaveItemTypeAuthenticTypeViewModel _viewModel = new SaveItemTypeAuthenticTypeViewModel();

    protected async Task HandleValidSubmit()
    {
        var command = new SaveItemTypeAuthenticType.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        _navigation.NavigateTo("ItemTypeAuthenticTypes");

        _toastService.ShowSuccess("Item Type Authentic Type was saved successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var query = new GetItemTypeAuthenticType.Query(Id);

        _viewModel = new SaveItemTypeAuthenticTypeViewModel(await _queryRouter.Send(query).ConfigureAwait(false));
    }
}

