@page "/Autographs/Add"
@page "/Autographs/Add/{memorabiliaId:int}"

@using Memorabilia.Application.Features.Admin.ItemTypeSpot
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Autograph
@using Memorabilia.Application.Features.Memorabilia

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/itemtypes.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="person">Person</label>
                    <InputSelect id="person" @bind-Value="_viewModel.PersonId" class="form-control">
                        @foreach (var person in _people)
                        {
                            <option value="@person.Id">@person.FullName</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="condition">Condition</label>
                    <InputSelect id="condition" @bind-Value="_viewModel.ConditionId" class="form-control">
                        @foreach (var condition in Domain.Constants.Condition.All)
                        {
                            <option value="@condition.Id">@condition.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="writingInstrument">Writing Instrument</label>
                    <InputSelect id="writingInstrument" @bind-Value="_viewModel.WritingInstrumentId" class="form-control">
                        @foreach (var writingInstrument in Domain.Constants.WritingInstrument.All)
                        {
                            <option value="@writingInstrument.Id">@writingInstrument.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="color">Color</label>
                    <InputSelect id="color" @bind-Value="_viewModel.ColorId" class="form-control">
                        @foreach (var color in Domain.Constants.Color.All)
                        {
                            <option value="@color.Id">@color.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group" hidden="@(!_displaySpots)">
                    <label for="spot">Spot</label>
                    <InputSelect id="spot" @bind-Value="_viewModel.SpotId" class="form-control">
                        @foreach (var spot in _spots)
                        {
                            <option value="@spot.Id">@spot.SpotName</option>
                        }
                    </InputSelect>
                </div>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="Memorabilia/UnsignedItems">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }

    private bool _displaySpots;
    private int _itemTypeId;
    private IEnumerable<PersonViewModel> _people = Enumerable.Empty<PersonViewModel>();
    private IEnumerable<ItemTypeSpotViewModel> _spots = Enumerable.Empty<ItemTypeSpotViewModel>();
    private SaveAutographViewModel _viewModel = new SaveAutographViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");        

        var command = new SaveAutograph.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        _navigation.NavigateTo("Autographs");

        _toastService.ShowSuccess("Autograph was added successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var query = new GetMemorabiliaItem.Query(MemorabiliaId);
        var memorabilia = await _queryRouter.Send(query).ConfigureAwait(false);

        _itemTypeId = memorabilia.ItemTypeId;

        var personQuery = new GetPeople.Query();
        _people = (await _queryRouter.Send(personQuery).ConfigureAwait(false)).People;

        _viewModel.UserId = userId.Value;
        _viewModel.MemorabiliaId = memorabilia.Id;
        _viewModel.PersonId = _people.FirstOrDefault()?.Id ?? 0;
        _viewModel.ConditionId = Domain.Constants.Condition.Pristine.Id;
        _viewModel.WritingInstrumentId = Domain.Constants.WritingInstrument.PaintPen.Id;
        _viewModel.ColorId = Domain.Constants.Color.Silver.Id;

        await GetSpots().ConfigureAwait(false);
    }

    private async Task GetSpots()
    {
        var query = new GetItemTypeSpots.Query(_itemTypeId);

        _spots = (await _queryRouter.Send(query).ConfigureAwait(false)).ItemTypeSpots;

        _displaySpots = _spots.Any();
        _viewModel.SpotId = _spots.FirstOrDefault()?.SpotId;
    }
}