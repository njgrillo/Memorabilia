@page "/Autographs/Add"
@page "/Autographs/Add/{memorabiliaId:int}"

@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Autograph
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Web.Controls.AcquisitionType
@using Memorabilia.Web.Controls.Color
@using Memorabilia.Web.Controls.Condition
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.PurchaseType
@using Memorabilia.Web.Controls.WritingInstrument

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/itemtypes.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="person">Person</label>
                    <_PersonSelector @bind-Value="@_viewModel.PersonId"
                                     @bind-Value:event="ValueChanged" />                    
                </div> 
                <div class="form-group">
                    <label for="condition">Condition</label>
                    <_ConditionDropDown @bind-Value="@_viewModel.ConditionId" 
                                        @bind-Value:event="ValueChanged" /> 
                </div>
                <div class="form-group">
                    <label for="writingInstrument">Writing Instrument</label>
                    <_WritingInstrumentDropDown @bind-Value="@_viewModel.WritingInstrumentId" 
                                                @bind-Value:event="ValueChanged" /> 
                </div>
                <div class="form-group">
                    <label for="color">Color</label>
                    <_ColorDropDown @bind-Value="@_viewModel.ColorId" 
                                    @bind-Value:event="ValueChanged" /> 
                </div>  
                <div class="form-group">
                    <label for="acquisitionType">Acquisition Type</label>
                    <_AcquisitionTypeDropDown @bind-Value="@_viewModel.AcquisitionTypeId" 
                                              @bind-Value:event="ValueChanged"
                                              IsAutograph="false" /> 
                </div>
                <div class="form-group">
                    <label for="acquiredDate">Acquired Date</label>
                    <InputDate id="acquiredDate" class="form-control" @bind-Value="_viewModel.AcquiredDate" />
                </div>
                <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                    <label for="cost">Cost</label>
                    <InputNumber id="cost" class="form-control" @bind-Value="_viewModel.Cost" />
                </div>
                <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                    <label for="purchaseType">Place of Purchase</label>
                    <_PurchaseTypeDropDown @bind-Value="@_viewModel.PurchaseTypeId" 
                                           @bind-Value:event="ValueChanged" /> 
                </div>
                <div class="form-group">
                    <label for="estimatedValue">Estimated Value</label>
                    <InputNumber id="estimatedValue" class="form-control" @bind-Value="_viewModel.EstimatedValue" />
                </div>
                <div class="form-group">
                    <label for="grade">Grade</label>
                    <InputText id="grade" class="form-control" @bind-Value="_viewModel.Grade" />
                </div>
                <div class="form-group">
                    <input type="checkbox" @onchange="eventArgs => { PersonalizationCheckboxClicked(eventArgs.Value); }" />
                    <label for="personalization">Has Personalization</label>
                    <div class="form-group" hidden="@(!_displayPersonalization)">
                        <div class="form-group">
                            <label for="text">Personalization Text</label>
                            <InputText id="text" class="form-control" @bind-Value="_viewModel.PersonalizationText" />
                        </div>
                        <div class="form-group">
                            <label for="greeting">Greeting</label>
                            <InputText id="greeting" class="form-control" @bind-Value="_viewModel.Grade" />
                        </div>
                    </div>                    
                </div> 
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="Memorabilia/UnsignedItems">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }

    private bool _displayPersonalization;
    private int _itemTypeId;
    private SaveAutographViewModel _viewModel = new SaveAutographViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");        

        var command = new SaveAutograph.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        _navigation.NavigateTo("Autographs");

        _toastService.ShowSuccess("Autograph was added successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");
    }

    private void PersonalizationCheckboxClicked(object isChecked)
    {
        _displayPersonalization = (bool)isChecked;

        if (!_displayPersonalization)
        {
            _viewModel.Greeting = null;
            _viewModel.PersonalizationText = null;
        }

        StateHasChanged();
    } 
}