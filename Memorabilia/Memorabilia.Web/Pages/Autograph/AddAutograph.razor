@page "/Autographs/Add"
@page "/Autographs/Add/{memorabiliaId:int}"

@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Autograph
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Web.Controls.AcquisitionType
@using Memorabilia.Web.Controls.Color
@using Memorabilia.Web.Controls.Condition
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.PurchaseType
@using Memorabilia.Web.Controls.WritingInstrument

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/autographs.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="person">Person</label>
                            <_Tooltip Text="Import from memorabilia item">
                                <img class="can-click" src="images/import.jpg" alt="Image" height="20" width="20" @onclick="OnImportPersonClick" />
                            </_Tooltip>
                            <BlazoredTypeahead SearchMethod="SearchPeople"
                                                @bind-Value="_viewModel.Person"
                                                Placeholder="Search by name...">
                                <SelectedTemplate Context="person">
                                    @person.DisplayName
                                </SelectedTemplate>
                                <ResultTemplate Context="person">
                                    @person.DisplayName
                                </ResultTemplate>
                            </BlazoredTypeahead>                
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="writingInstrument">Writing Instrument</label>
                            <_WritingInstrumentDropDown @bind-Value="@_viewModel.WritingInstrumentId" 
                                                        @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>                    
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="condition">Condition</label>
                            <_ConditionDropDown @bind-Value="@_viewModel.ConditionId" 
                                                @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="color">Color</label>
                            <_ColorDropDown @bind-Value="@_viewModel.ColorId" 
                                            @bind-Value:event="ValueChanged" /> 
                        </div>  
                    </div>                    
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="grade">Grade</label>
                            <InputNumber id="grade" class="form-control" @bind-Value="_viewModel.Grade" />
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="acquisitionType">Acquisition Type</label>
                            <_Tooltip Text="Import from memorabilia item">
                                <img class="can-click" src="images/import.jpg" alt="Image" height="20" width="20" @onclick="OnImportAcquisitionClick" />
                            </_Tooltip>
                            <_AcquisitionTypeDropDown @bind-Value="@_viewModel.AcquisitionTypeId" 
                                                      @bind-Value:event="ValueChanged"
                                                      IsAutograph="false" /> 
                        </div>
                    </div>                    
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="estimatedValue">Estimated Value</label>
                            <InputNumber id="estimatedValue" class="form-control" @bind-Value="_viewModel.EstimatedValue" />
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="acquiredDate">Acquired Date</label>
                            <InputDate id="acquiredDate" class="form-control" @bind-Value="_viewModel.AcquiredDate" />
                        </div>
                    </div>                    
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <input type="checkbox" @onchange="eventArgs => { PersonalizationCheckboxClicked(eventArgs.Value); }" />
                            <label for="personalization">Has Personalization</label>
                            <div class="form-group" hidden="@(!_displayPersonalization)">
                                <div class="form-group">
                                    <label for="text">Personalization Text</label>
                                    <_Tooltip Text="Example: To Nick">
                                        <img src="images/info.png" alt="Image" height="20" width="20" />
                                    </_Tooltip>
                                    <InputText id="text" class="form-control" @bind-Value="_viewModel.PersonalizationText" />
                                </div>
                            </div>                    
                        </div> 
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                            <label for="cost">Cost</label>
                            <InputNumber id="cost" class="form-control" @bind-Value="_viewModel.Cost" />
                        </div>
                    </div>                    
                </div>
                <div class="row">
                    <div class="col-lg-6" />
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                            <label for="purchaseType">Place of Purchase</label>
                            <_PurchaseTypeDropDown @bind-Value="@_viewModel.PurchaseTypeId" 
                                                   @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>                    
                </div>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" @onclick="@(()=> _continue = true)">Save & Continue</button>
                    <button type="submit" class="btn btn-primary">Save & Exit</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(_ => _navigation.NavigateTo("Memorabilia"))">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }

    private bool _continue;
    private bool _displayPersonalization;
    private int _itemTypeId;
    private IEnumerable<PersonViewModel> _people = Enumerable.Empty<PersonViewModel>();   
    private SaveAutographViewModel _viewModel = new SaveAutographViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login"); 

        var command = new SaveAutograph.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        if (_continue)
        {
            //if (_viewModel.IsAuthenticated)
            //{
            //    url = $"Autographs/Authentications/Add/{command.Id}{(_viewModel.HasInscription ? "/true" : string.Empty)}";
            //}
            //else if (_viewModel.HasInscription)
            //{
            //    url = $"Autographs/Inscriptions/Add/{command.Id}";
            //}
            //else
            //{
            //    url = $"Autographs/{_viewModel.ItemTypeName}/Add/{command.Id}";
            //}
        }

        _navigation.NavigateTo(_continue ? $"Autographs/Inscriptions/Add/{command.Id}" : "Memorabilia");

        _toastService.ShowSuccess("Autograph was added successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var query = new GetMemorabiliaItem.Query(MemorabiliaId);
        var memorabiliaViewModel = await _queryRouter.Send(query).ConfigureAwait(false);

        _viewModel = new SaveAutographViewModel(memorabiliaViewModel);

        await LoadPeople().ConfigureAwait(false);

        SetDefaults();
    }

    private async Task LoadPeople()
    {
        var query = new GetPeople.Query();

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People;
    }

    private void OnImportAcquisitionClick()
    {
        _viewModel.AcquisitionTypeId = _viewModel.MemorabiliaAcquisitionTypeId;
        _viewModel.AcquiredDate = _viewModel.MemorabiliaAcquiredDate;
        _viewModel.Cost = _viewModel.MemorabiliaCost;
        _viewModel.PurchaseTypeId = _viewModel.MemorabiliaPurchaseTypeId ?? 0;
    }

    private void OnImportPersonClick()
    {
        _viewModel.Person = _viewModel.MemorabiliaPerson;
    }

    private void PersonalizationCheckboxClicked(object isChecked)
    {
        _displayPersonalization = (bool)isChecked;

        _viewModel.PersonalizationText = _displayPersonalization ? $"To {_viewModel.UserFirstName}" : null;

        StateHasChanged();
    } 

    private async Task<IEnumerable<PersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetDefaults()
    {
        _viewModel.ConditionId = Domain.Constants.Condition.Pristine.Id;
    }
}