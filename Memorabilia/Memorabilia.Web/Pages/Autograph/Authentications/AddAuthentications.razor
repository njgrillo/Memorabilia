@page "/Autographs/Authentications/Add/{autographId:int}"

@using Memorabilia.Application.Features.Autograph
@using Memorabilia.Application.Features.Autograph.Authentication
@using Memorabilia.Web.Controls
@using Memorabilia.Web.Controls.AuthenticationCompany

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_authenticationsViewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="@_authenticationsViewModel.ImagePath" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <label for="company">Authentication Company</label>
                            <_AuthenticationCompanyDropDown @bind-Value="@_viewModel.AuthenticationCompanyId"
                                                            @bind-Value:event="ValueChanged" /> 
                        </div> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">  
                            <label for="hasHologram">Has Hologram</label>
                            <InputCheckbox id="hologram" @bind-Value="@_viewModel.HasHologram" />
                        </div> 
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">     
                            <label for="hasLetter">Has Letter</label>
                            <InputCheckbox id="letter" @bind-Value="@_viewModel.HasLetter" />
                        </div> 
                    </div>
                </div>   
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">  
                            <label for="verification">Verification</label>
                            <InputText id="verification" class="form-control" @bind-Value="_viewModel.Verification" />                            
                        </div> 
                    </div>
                </div> 
                <div class="text-right">
                    <button type="button" class="btn btn-secondary" @onclick="AddAuthentication">Add</button>
                </div>
                <br />
                <table class="table" style="border: 1px solid black;">
                    <thead>
                        <tr>
                            <th>Authentication Company</th>
                            <th>Has Hologram</th>
                            <th>Has Letter</th>
                            <th>Verification</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var authentication in _authenticationsViewModel.Authentications)
                        {
                            <tr>
                                <td>@authentication.AuthenticationCompanyName</td>
                                <td>@(authentication.HasHologram ? "Yes" : "No")</td>
                                <td>@(authentication.HasLetter ? "Yes" : "No")</td>
                                <td>@authentication.Verification</td>
                                <td>
                                    <_Tooltip Text="Delete">
                                        <img class="can-click" 
                                             src="images/trash.png" 
                                             height="25" 
                                             width="25" 
                                             @onclick="@(_ => Remove(authentication.AuthenticationCompanyId))" />
                                    </_Tooltip>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" @onclick="@(()=> _continue = true)">Save & Continue</button>
                    <button type="submit" class="btn btn-primary">Save & Exit</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(_ => _navigation.NavigateTo("Memorabilia"))">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int AutographId { get; set; }

    private bool _continue;
    private SaveAuthenticationsViewModel _authenticationsViewModel = new SaveAuthenticationsViewModel();     
    private SaveAuthenticationViewModel _viewModel = new SaveAuthenticationViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId").ConfigureAwait(false);

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        _authenticationsViewModel.AutographId = AutographId;

        var command = new SaveAuthentications.Command(_authenticationsViewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        var url = _continue ? $"Autographs/{_authenticationsViewModel.ItemTypeName}/Add/{_authenticationsViewModel.AutographId}" : "Memorabilia";

        _navigation.NavigateTo(url);

        _toastService.ShowSuccess("Authentications were added successfully!", _authenticationsViewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId").ConfigureAwait(false);

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var query = new GetAutograph.Query(AutographId);
        var autograph = await _queryRouter.Send(query).ConfigureAwait(false);

        _authenticationsViewModel.ItemTypeName = autograph.ItemTypeName;
    } 

    private void AddAuthentication()
    {        
        _authenticationsViewModel.Authentications.Add(_viewModel);   
        _viewModel = new SaveAuthenticationViewModel();
    }

    private void Remove(int authenticationCompanyId)
    {
        var authentication = _authenticationsViewModel.Authentications.Single(authentication => authentication.AuthenticationCompanyId == authenticationCompanyId);

        _authenticationsViewModel.Authentications.Remove(authentication);                                                                               
    }    
}
