@page "/Memorabilia/Add"

@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls
@using Memorabilia.Web.Controls.AcquisitionType
@using Memorabilia.Web.Controls.Condition
@using Memorabilia.Web.Controls.ItemType
@using Memorabilia.Web.Controls.PurchaseType
@using Memorabilia.Web.Controls.PrivacyType

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="@_viewModel.ImagePath" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="itemType">Item Type</label>
                            <_ItemTypeDropDown @bind-Value="@_viewModel.ItemTypeId" 
                                               @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="acquisitionType">Acquisition Type</label>
                            <_AcquisitionTypeDropDown @bind-Value="@_viewModel.AcquisitionTypeId" 
                                                      @bind-Value:event="ValueChanged"
                                                      IsAutograph="false" /> 
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="condition">Condition</label>
                            <_ConditionDropDown @bind-Value="@_viewModel.ConditionId" 
                                                @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="acquiredDate">Acquired Date</label>
                            <InputDate id="acquiredDate" class="form-control" @bind-Value="_viewModel.AcquiredDate" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="estimatedValue">Estimated Value</label>
                            <InputNumber id="estimatedValue" class="form-control" @bind-Value="_viewModel.EstimatedValue" />
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                            <label for="cost">Cost</label>
                            <InputNumber id="cost" class="form-control" @bind-Value="_viewModel.Cost" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="privacyType">Privacy Type</label>
                            <_Tooltip Text="Sets whether or not this item is viewable by everyone">
                                <img src="images/info.png" alt="Image" height="20" width="20" />
                            </_Tooltip>
                            <_PrivacyTypeDropDown @bind-Value="@_viewModel.PrivacyTypeId" 
                                                  @bind-Value:event="ValueChanged" />                             
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.CanHaveCost)">
                            <label for="purchaseType">Place of Purchase</label>
                            <_PurchaseTypeDropDown @bind-Value="@_viewModel.PurchaseTypeId" 
                                                   @bind-Value:event="ValueChanged" /> 
                        </div>
                    </div>
                </div>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" @onclick="@(()=> _continue = true)">Save & Continue</button>
                    <button type="submit" class="btn btn-primary">Save & Exit</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(_ => _navigation.NavigateTo("Memorabilia/UnsignedItems"))">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool _continue;

    private SaveMemorabiliaItemViewModel _viewModel = new SaveMemorabiliaItemViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        _viewModel.UserId = userId.Value;

        var command = new SaveMemorabiliaItem.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        var itemTypeName = ItemType.Find(_viewModel.ItemTypeId).Name;
        var url = _continue ? $"Memorabilia/{itemTypeName}/Add/{command.Id}" : "Memorabilia/UnsignedItems";

        _navigation.NavigateTo(url);

        _toastService.ShowSuccess($"{itemTypeName} was added successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        SetDefaults();
    }

    private void SetDefaults()
    {
        _viewModel.AcquisitionTypeId = AcquisitionType.Purchase.Id;
        _viewModel.ConditionId = Condition.Pristine.Id;
        _viewModel.PrivacyTypeId = PrivacyType.Public.Id;
    }
}