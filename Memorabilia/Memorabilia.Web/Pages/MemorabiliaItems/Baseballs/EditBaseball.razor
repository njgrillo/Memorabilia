@page "/Memorabilia/Baseball/Edit/{memorabiliaId:int}"

@using Memorabilia.Application.Features.Admin.Commissioner
@using Memorabilia.Application.Features.Admin.ItemTypeBrand
@using Memorabilia.Application.Features.Admin.ItemTypeSize
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Application.Features.Memorabilia.Baseball

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/itemtypes.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <_BaseballTypes @ref="_baseballType" BaseballTypeId="@_viewModel.BaseballTypeId" /> 
                <_Brands @ref="_brand" Brands="@_brands" BrandId="@_viewModel.BrandId" />
                <_Commissioners @ref="_commissioner" Commissioners="@_commissioners" CommissionerId="@_viewModel.CommissionerId" />
                <_Sizes @ref="_size" Sizes="@_sizes" SizeId="@_viewModel.SizeId" />                               
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="Memorabilia/UnsignedItems">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }  

    private _BaseballTypes _baseballType;
    private _Brands _brand;
    private IEnumerable<ItemTypeBrandViewModel> _brands = Enumerable.Empty<ItemTypeBrandViewModel>();
    private _Commissioners _commissioner;
    private IEnumerable<CommissionerViewModel> _commissioners = Enumerable.Empty<CommissionerViewModel>();
    private _Sizes _size;
    private IEnumerable<ItemTypeSizeViewModel> _sizes = Enumerable.Empty<ItemTypeSizeViewModel>();
    private SaveBaseballViewModel _viewModel = new SaveBaseballViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        _viewModel.BaseballTypeId = _baseballType.BaseballTypeId;
        _viewModel.BrandId = _brand.BrandId;
        _viewModel.CommissionerId = _commissioner.CommissionerId;
        //_viewModel.MemorabiliaId = MemorabiliaId;
        _viewModel.SizeId = _size.SizeId;

        // person
        // team
        // sport

        var command = new SaveBaseball.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        _navigation.NavigateTo("Memorabilia");

        _toastService.ShowSuccess("Baseball Details were saved successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        await GetBrands().ConfigureAwait(false);
        await GetCommissioners().ConfigureAwait(false);
        await GetSizes().ConfigureAwait(false);

        var query = new GetBaseball.Query(MemorabiliaId);

        _viewModel = new SaveBaseballViewModel(await _queryRouter.Send(query).ConfigureAwait(false));
    }

    private async Task GetBrands()
    {
        var query = new GetItemTypeBrands.Query(Domain.Constants.ItemType.Baseball.Id);

        _brands = (await _queryRouter.Send(query).ConfigureAwait(false)).ItemTypeBrands;
    }

    private async Task GetCommissioners()
    {
        var query = new GetCommissioners.Query(Domain.Constants.Sport.Baseball.Id);

        _commissioners = (await _queryRouter.Send(query).ConfigureAwait(false)).Commissioners;
    }

    private async Task GetSizes()
    {
        var query = new GetItemTypeSizes.Query(Domain.Constants.ItemType.Baseball.Id);

        _sizes = (await _queryRouter.Send(query).ConfigureAwait(false)).ItemTypeSizes;
    }
}