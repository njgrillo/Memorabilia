@page "/Memorabilia/Baseball/Edit/{memorabiliaId:int}"

@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Application.Features.Memorabilia.Baseball
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls.Baseball
@using Memorabilia.Web.Controls.Brand
@using Memorabilia.Web.Controls.Commissioner
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.Size
@using Memorabilia.Web.Controls.Team

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/itemtypes.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="brand">Brand</label>
                    <_BrandDropDown @bind-Value="@_viewModel.BrandId" 
                                    @bind-Value:event="ValueChanged"
                                    ItemType="@ItemType.Baseball" />
                </div>                
                <div class="form-group" hidden="@(!_viewModel.DisplayBaseballType)">
                    <label for="baseballType">Baseball Type</label>
                    <_BaseballTypeDropDown @bind-Value="@_viewModel.BaseballTypeId" 
                                           @bind-Value:event="ValueChanged" /> 
                </div>                 
                <div class="form-group" hidden="@(!_viewModel.DisplayBaseballTypeYear)">
                    <label for="year">Year</label>
                    <InputNumber id="year" class="form-control" @bind-Value="_viewModel.BaseballTypeYear" />
                </div> 
                <div class="form-group" hidden="@(!_viewModel.DisplayBaseballTypeAnniversary)">
                    <label for="anniversary">Anniversary</label>
                    <InputText id="anniversary" class="form-control" @bind-Value="_viewModel.BaseballTypeAnniversary" />
                </div>  
                <div class="form-group">
                    <label for="commissioner">Commissioner</label>
                    <_CommissionerDropDown @bind-Value="@_viewModel.CommissionerId"
                                           @bind-Value:event="ValueChanged" 
                                           Sport="@Sport.Baseball" />
                </div>
                <div class="form-group">
                    <label for="size">Size</label>
                    <_SizeDropDown @bind-Value="@_viewModel.SizeId"
                                   @bind-Value:event="ValueChanged" 
                                   ItemType="@ItemType.Baseball" /> 
                </div>                
                <div class="form-group">
                    <input type="checkbox" checked="@_viewModel.HasPerson" @onchange="eventArgs => { PersonCheckboxClicked(eventArgs.Value); }" />
                    <label for="person">Associate Baseball with a Person</label>
                    <div class="form-group" hidden="@(!_displayPeople)">
                        <_PersonSelector @bind-Value="@_viewModel.PersonId"
                                         @bind-Value:event="ValueChanged" /> 
                    </div>                    
                </div>  
                <div class="form-group">
                    <input type="checkbox" checked="@_viewModel.HasTeam" @onchange="eventArgs => { TeamsCheckboxClicked(eventArgs.Value); }" />
                    <label for="teams">Associate Baseball with a Team</label>
                    <div class="form-group" hidden="@(!_displayTeams)">
                        <_TeamDropDown @bind-Value="@_viewModel.TeamId"
                                       @bind-Value:event="ValueChanged"
                                       Sport="@Sport.Baseball" /> 
                    </div>                    
                </div>                             
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="Memorabilia/UnsignedItems">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }  

    private bool _displayPeople;
    private bool _displayTeams;
    private SaveBaseballViewModel _viewModel = new SaveBaseballViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var command = new SaveBaseball.Command(MemorabiliaId, _viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        _navigation.NavigateTo("Memorabilia");

        _toastService.ShowSuccess("Baseball Details were saved successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");        

        var query = new GetBaseball.Query(MemorabiliaId);
        var baseballViewModel = await _queryRouter.Send(query).ConfigureAwait(false);

        if (baseballViewModel.MemorabiliaBrand == null)
        {
            _navigation.NavigateTo($"Memorabilia/Baseball/Add/{MemorabiliaId}");
            return;
        }    

        _viewModel = new SaveBaseballViewModel(baseballViewModel);  
        
        _displayPeople = _viewModel.HasPerson;
        _displayTeams = _viewModel.HasTeam;
    }  

    private void PersonCheckboxClicked(object isChecked)
    {     
        _displayPeople = (bool)isChecked;

        if (!_displayPeople)
            _viewModel.PersonId = 0;

        StateHasChanged();
    } 

    public void TeamsCheckboxClicked(object isChecked)
    {
        _displayTeams = (bool)isChecked;

        if (!_displayTeams)
            _viewModel.TeamId = 0;

        StateHasChanged();
    }
}