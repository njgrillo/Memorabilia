@page "/Memorabilia/Baseball/Add/{memorabiliaId:int}"

@using Blazored.Typeahead
@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Application.Features.Memorabilia.Baseball
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls
@using Memorabilia.Web.Controls.Baseball
@using Memorabilia.Web.Controls.Commissioner
@using Memorabilia.Web.Controls.GameStyleType
@using Memorabilia.Web.Controls.ItemTypeBrand
@using Memorabilia.Web.Controls.ItemTypeLevel
@using Memorabilia.Web.Controls.ItemTypeSize
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.Team

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="@_viewModel.ImagePath" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="level">Level</label>
                            <_ItemTypeLevelDropDown @bind-Value="@_viewModel.LevelTypeId"
                                                    @bind-Value:event="ValueChanged" 
                                                    ItemType="@ItemType.Baseball" /> 
                        </div> 
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="brand">Brand</label>
                            <_ItemTypeBrandDropDown @bind-Value="@_viewModel.BrandId" 
                                                    @bind-Value:event="ValueChanged"
                                                    ItemType="@ItemType.Baseball" />
                        </div> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="size">Size</label>
                            <_ItemTypeSizeDropDown @bind-Value="@_viewModel.SizeId"
                                                   @bind-Value:event="ValueChanged" 
                                                   ItemType="@ItemType.Baseball" /> 
                        </div> 
                    </div>
                    <div class="col-lg-6">
                         <div class="form-group" hidden="@(!_viewModel.DisplayBaseballType)">
                            <label for="baseballType">Baseball Type</label>
                            <_BaseballTypeDropDown @bind-Value="@_viewModel.BaseballTypeId" 
                                                   @bind-Value:event="ValueChanged" /> 
                        </div> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="gameStyleType">Game Style Type</label>
                            <_AuthenticTypeDropDown @bind-Value="@_viewModel.GameStyleTypeId"
                                                    @bind-Value:event="ValueChanged" /> 
                        </div> 
                    </div>
                    <div class="col-lg-6">
                         <div class="form-group">
                            <label for="commissioner">Commissioner</label>
                            <_CommissionerDropDown @bind-Value="@_viewModel.CommissionerId"
                                                   @bind-Value:event="ValueChanged" 
                                                   Sport="@Sport.Baseball" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6" />
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.DisplayBaseballTypeYear)">
                            <label for="year">Year</label>
                            <InputNumber id="year" class="form-control" @bind-Value="_viewModel.BaseballTypeYear" />
                        </div>                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6" />
                    <div class="col-lg-6">
                        <div class="form-group" hidden="@(!_viewModel.DisplayBaseballTypeAnniversary)">
                            <label for="anniversary">Anniversary</label>
                            <_Tooltip Text="Example: 25th">
                                <img src="images/info.png" alt="Image" height="20" width="20" />
                            </_Tooltip>
                            <InputText id="anniversary" class="form-control" @bind-Value="_viewModel.BaseballTypeAnniversary" />
                        </div>                         
                    </div>
                </div>
                <div class="row">                    
                    <div class="col-lg-12">
                        <div class="form-group">
                            <input type="checkbox" @onchange="eventArgs => { PersonCheckboxClicked(eventArgs.Value); }" />
                            <label for="person">Associate Baseball with a Person</label>
                            <div class="form-group" hidden="@(!_displayPeople)">
                                <BlazoredTypeahead SearchMethod="SearchPeople"
                                                   @bind-Value="_viewModel.Person"
                                                   Placeholder="Search by name...">
                                    <SelectedTemplate Context="person">
                                        @person.DisplayName
                                    </SelectedTemplate>
                                    <ResultTemplate Context="person">
                                        @person.DisplayName
                                    </ResultTemplate>
                                </BlazoredTypeahead>
                            </div>                    
                        </div> 
                    </div>
                </div>              
                <div class="row">                    
                    <div class="col-lg-12">
                        <div class="form-group">
                            <input type="checkbox" @onchange="eventArgs => { TeamsCheckboxClicked(eventArgs.Value); }" />
                            <label for="teams">Associate Baseball with a Team</label>
                            <div class="form-group" hidden="@(!_displayTeams)">
                                <_TeamDropDown @bind-Value="@_viewModel.TeamId"
                                               @bind-Value:event="ValueChanged"                                        
                                               Sport="@Sport.Baseball" /> 
                            </div>                    
                        </div> 
                    </div>
                </div>                            
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" @onclick="@(()=> _continue = true)">Save & Continue</button>
                    <button type="submit" class="btn btn-primary">Save & Exit</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(_ => _navigation.NavigateTo("Memorabilia"))">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }

    private bool _continue;
    private bool _displayPeople;
    private bool _displayTeams;
    private IEnumerable<PersonViewModel> _people = Enumerable.Empty<PersonViewModel>();    
    private SaveBaseballViewModel _viewModel = new SaveBaseballViewModel();    

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId").ConfigureAwait(false);

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        _viewModel.MemorabiliaId = MemorabiliaId;

        var command = new SaveBaseball.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        var url = _continue ? $"Memorabilia/Image/Add/{command.MemorabiliaId}" : "Memorabilia";

        _navigation.NavigateTo(url);

        _toastService.ShowSuccess("Baseball Details were added successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId").ConfigureAwait(false);

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        SetDefaults();

        await LoadPeople().ConfigureAwait(false);
    }    

    private async Task LoadPeople()
    {
        var query = new GetPeople.Query();

        _people = (await _queryRouter.Send(query).ConfigureAwait(false)).People;
    }

    private void PersonCheckboxClicked(object isChecked)
    {
        _displayPeople = (bool)isChecked;

        if (!_displayPeople)
            _viewModel.Person = null;

        StateHasChanged();
    } 

    private async Task<IEnumerable<PersonViewModel>> SearchPeople(string searchText)
    {
        return await Task.FromResult(_people.Where(person => person.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ConfigureAwait(false);
    }

    private void SetDefaults()
    {
        _viewModel.GameStyleTypeId = GameStyleType.None.Id;
        _viewModel.BrandId = Brand.Rawlings.Id;
        _viewModel.LevelTypeId = LevelType.Professional.Id;
        _viewModel.SizeId = Size.Standard.Id;
        _viewModel.BaseballTypeId = BaseballType.Official.Id;
    }

    private void TeamsCheckboxClicked(object isChecked)
    {
        _displayTeams = (bool)isChecked;

        if (!_displayTeams)
            _viewModel.TeamId = 0;

        StateHasChanged();
    }     
}