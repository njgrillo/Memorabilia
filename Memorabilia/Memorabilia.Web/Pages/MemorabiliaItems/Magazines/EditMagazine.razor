@page "/Memorabilia/Magazine/Edit/{memorabiliaId:int}"

@using Memorabilia.Application.Features.Admin.Person
@using Memorabilia.Application.Features.Memorabilia
@using Memorabilia.Application.Features.Memorabilia.Magazine
@using Memorabilia.Domain.Constants
@using Memorabilia.Web.Controls.ItemTypeBrand
@using Memorabilia.Web.Controls.ItemTypeSize
@using Memorabilia.Web.Controls.Person
@using Memorabilia.Web.Controls.Team

@inject CommandRouter _commandRouter
@inject ProtectedLocalStorage _localStorage
@inject NavigationManager _navigation
@inject QueryRouter _queryRouter
@inject IToastService _toastService

@if (_viewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12" style="text-align: center">
            <h1>@_viewModel.PageTitle</h1>
        </div>
    </div>
    <br />
    <div style="border: 1px solid black; margin-top: 2%; margin-bottom: 2%; margin-left: 2%; margin-right: 2%;">
        <div class="row" style="margin-top: 2%; margin-bottom: 2%; margin-left: 1%; margin-right: 1%;">
            <div class="col-lg-12" style="text-align: center">
                <img src="images/magazine.jpg" alt="Image" height="150" width="150" />
            </div>            
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="brand">Brand</label>
                            <_ItemTypeBrandDropDown @bind-Value="@_viewModel.BrandId" 
                                                    @bind-Value:event="ValueChanged"
                                                    ItemType="_viewModel.ItemType" />
                        </div> 
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">
                            <label for="size">Size</label>
                            <_ItemTypeSizeDropDown @bind-Value="@_viewModel.SizeId"
                                                   @bind-Value:event="ValueChanged" 
                                                   ItemType="_viewModel.ItemType" /> 
                        </div> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                         <div class="form-group">
                            <label for="date">Date</label>
                            <InputDate id="date" class="form-control" @bind-Value="_viewModel.Date" />
                        </div> 
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">                            
                            <InputCheckbox id="framed" @bind-Value="@_viewModel.Framed" />
                            <label for="framed">Framed</label>
                        </div> 
                    </div>
                </div>
                <div class="row">                    
                    <div class="col-lg-12">
                        <div class="form-group">
                            <input type="checkbox" @onchange="eventArgs => { PersonCheckboxClicked(eventArgs.Value); }" />
                            <label for="person">Associate Magazine with People</label>
                            <div class="form-group" hidden="@(!_displayPeople)">
                                <_PersonSelector AllowMultiple="true" 
                                                 People="_viewModel.People" />
                            </div>                    
                        </div> 
                    </div>
                </div>              
                <div class="row">                    
                    <div class="col-lg-12">
                        <div class="form-group">
                            <input type="checkbox" @onchange="eventArgs => { TeamsCheckboxClicked(eventArgs.Value); }" />
                            <label for="teams">Associate Magazine with Team(s)</label>
                            <div class="form-group" hidden="@(!_displayTeams)">
                                <_TeamSelector AllowMultiple="true" 
                                               Teams="_viewModel.Teams" />
                            </div>                    
                        </div> 
                    </div>
                </div>                            
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" @onclick="@(()=> _continue = true)">Save & Continue</button>
                    <button type="submit" class="btn btn-primary">Save & Exit</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(_ => _navigation.NavigateTo("Memorabilia"))">Cancel</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="col-md-12" style="text-align: center">
                <a href="Memorabilia/UnsignedItems">Back</a>
            </div>
        </div>
        <br />
    </div>
}

@code {
    [Parameter]
    public int MemorabiliaId { get; set; }

    private bool _continue;
    private bool _displayPeople;
    private bool _displayTeams; 
    private SaveMagazineViewModel _viewModel = new SaveMagazineViewModel();

    protected async Task HandleValidSubmit()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");

        var command = new SaveMagazine.Command(_viewModel);

        await _commandRouter.Send(command).ConfigureAwait(false);

        var url = _continue ? $"Memorabilia/Image/Edit/{command.MemorabiliaId}" : "Memorabilia";

        _navigation.NavigateTo(url);

        _toastService.ShowSuccess("Magazine Details were saved successfully!", _viewModel.PageTitle);
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await _localStorage.GetAsync<int>("UserId");

        if (userId.Value == 0)
            _navigation.NavigateTo("Login");        

        var query = new GetMagazine.Query(MemorabiliaId);
        var MagazineViewModel = await _queryRouter.Send(query).ConfigureAwait(false);

        if (MagazineViewModel.Brand == null)
        {
            _navigation.NavigateTo($"Memorabilia/Magazine/Add/{MemorabiliaId}");
            return;
        }    

        _viewModel = new SaveMagazineViewModel(MagazineViewModel);  
        
        _displayPeople = _viewModel.HasPerson;
        _displayTeams = _viewModel.HasTeam;
    }  

    private void PersonCheckboxClicked(object isChecked)
    {     
        _displayPeople = (bool)isChecked;

        if (!_displayPeople)
            _viewModel.People = new();

        StateHasChanged();
    } 

    public void TeamsCheckboxClicked(object isChecked)
    {
        _displayTeams = (bool)isChecked;

        if (!_displayTeams)
            _viewModel.Teams = new();

        StateHasChanged();
    }
}