// <auto-generated />
using System;
using Memorabilia.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Memorabilia.Repository.Migrations.Memorabilia
{
    [DbContext(typeof(MemorabiliaContext))]
    [Migration("20240503123043_InitialCreateMemorabilia")]
    partial class InitialCreateMemorabilia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Memorabilia.Domain.Entities.Acquisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("AcquiredWithAutograph")
                        .HasColumnType("bit");

                    b.Property<int>("AcquisitionTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("PurchaseTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Acquisition");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingleLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvidence")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AllStar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int?>("SportLeagueLevelId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("AllStar");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Autograph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcquisitionId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Denominator")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool?>("FullName")
                        .HasColumnType("bit");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numerator")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("WritingInstrumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("PersonId");

                    b.ToTable("Autograph");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthenticationCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("AutographId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasCertificationCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHologram")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLetter")
                        .HasColumnType("bit");

                    b.Property<string>("Verification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Witnessed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AutographId");

                    b.ToTable("AutographAuthentication");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutographId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AutographId");

                    b.ToTable("AutographImage");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutographId")
                        .HasColumnType("int");

                    b.Property<int>("SpotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutographId")
                        .IsUnique();

                    b.ToTable("AutographSpot");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CareerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Record")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("CareerRecord");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Champion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChampionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Champion");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollectionMemorabilia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("MemorabiliaId");

                    b.ToTable("CollectionMemorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("College");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollegeHallOfFame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SportId");

                    b.ToTable("CollegeHallOfFame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollegeRetiredNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("PersonId");

                    b.ToTable("CollegeRetiredNumber");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int?>("Overall")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Pick")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Draft");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ForumTopicUserBookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForumTopicUserBookmark");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoundYear")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportLeagueLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportLeagueLevelId");

                    b.ToTable("Franchise");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.FranchiseHallOfFame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PersonId");

                    b.ToTable("FranchiseHallOfFame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.HallOfFame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BallotNumber")
                        .HasColumnType("int");

                    b.Property<int?>("InductionYear")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportLeagueLevelId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VotePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("HallOfFame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Inscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutographId")
                        .HasColumnType("int");

                    b.Property<string>("InscriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InscriptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutographId");

                    b.ToTable("Inscription");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.InternationalHallOfFame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InductionYear")
                        .HasColumnType("int");

                    b.Property<int>("InternationalHallOfFameTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("InternationalHallOfFame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Leader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeaderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Leader");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Memorabilia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Denominator")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("ForTrade")
                        .HasColumnType("bit");

                    b.Property<bool>("Framed")
                        .HasColumnType("bit");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numerator")
                        .HasColumnType("int");

                    b.Property<int>("PrivacyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaAcquisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcquisitionId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaAcquisition");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBammer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BammerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("InPackage")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBammer");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBaseball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Anniversary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseballTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LeaguePresidentId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBaseball");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBasketball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketballTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBasketball");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBat");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBobblehead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasBox")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBobblehead");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HardCover")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBook");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaBrand");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Custom")
                        .HasColumnType("bit");

                    b.Property<bool>("Licensed")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("OrientationId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaCard");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCereal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CerealTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaCereal");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCommissioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommissionerId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaCommissioner");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFigure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FigureSpecialtyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FigureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaFigure");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFirstDayCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaFirstDayCover");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFootball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FootballTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaFootball");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaForSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowBestOffer")
                        .HasColumnType("bit");

                    b.Property<decimal?>("BuyNowPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinimumOfferPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaForSale");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameStyleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaGame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaGlove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GloveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaGlove");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaHelmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HelmetFinishId")
                        .HasColumnType("int");

                    b.Property<int?>("HelmetQualityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HelmetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<bool>("Throwback")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaHelmet");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.ToTable("MemorabiliaImage");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaJersey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JerseyQualityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("JerseyStyleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("JerseyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaJersey");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaJerseyNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaJerseyNumber");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaLevelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaLevelType");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaMagazine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Framed")
                        .HasColumnType("bit");

                    b.Property<bool>("Matted")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("OrientationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaMagazine");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("PersonId");

                    b.ToTable("MemorabiliaPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Matted")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("OrientationId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Stretched")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaPicture");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.ToTable("MemorabiliaSize");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("SportId");

                    b.ToTable("MemorabiliaSport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("TeamId");

                    b.ToTable("MemorabiliaTeam");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemorabiliaTransaction");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransactionSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.HasIndex("MemorabiliaTransactionId");

                    b.ToTable("MemorabiliaTransactionSale");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransactionTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CashIncludedAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("CashIncludedTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("MemorabiliaTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTradeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId")
                        .IsUnique();

                    b.HasIndex("MemorabiliaTransactionId");

                    b.ToTable("MemorabiliaTransactionTrade");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("BuyerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SellerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerUserId");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("SellerUserId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonAccomplishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccomplishmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAccomplishment");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwardTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAward");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonCollege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCollege");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonNickname", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonNickname");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonOccupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OccupationId")
                        .HasColumnType("int");

                    b.Property<int>("OccupationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonOccupation");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.ToTable("PersonPosition");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SportId");

                    b.ToTable("PersonSport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("PersonTeam");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Personalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutographId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutographId")
                        .IsUnique();

                    b.ToTable("Personalization");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoterImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SelfAddressedStampedEnvelopeAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionDeadlineDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("PrivateSigning");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningAuthenticationCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthenticationCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrivateSigningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningId");

                    b.ToTable("PrivateSigningAuthenticationCompany");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("PrivateSigningCustomItemGroup");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateSigningCustomItemGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningCustomItemGroupId");

                    b.ToTable("PrivateSigningCustomItemTypeGroup");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemTypeGroupDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PrivateSigningCustomItemGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateSigningCustomItemTypeGroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningCustomItemGroupId");

                    b.ToTable("PrivateSigningCustomItemTypeGroupDetail");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningItemTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrivateSigningItemGroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PrivateSigningItemTypeGroup");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowInscriptions")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InscriptionCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateSigningId")
                        .HasColumnType("int");

                    b.Property<string>("PromoterImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpotsAvailable")
                        .HasColumnType("int");

                    b.Property<int?>("SpotsConfirmed")
                        .HasColumnType("int");

                    b.Property<int?>("SpotsReserved")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PrivateSigningId");

                    b.ToTable("PrivateSigningPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPersonDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrivateSigningCustomItemTypeGroupDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateSigningItemTypeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateSigningPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningCustomItemTypeGroupDetailId");

                    b.HasIndex("PrivateSigningItemTypeGroupId");

                    b.HasIndex("PrivateSigningPersonId");

                    b.ToTable("PrivateSigningPersonDetail");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPersonExcludeItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivateSigningPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningPersonId");

                    b.ToTable("PrivateSigningPersonExcludeItemType");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPromoterProvidedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PrivateSigningId")
                        .HasColumnType("int");

                    b.Property<int>("PromoterProvidedItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrivateSigningId");

                    b.HasIndex("PromoterProvidedItemId");

                    b.ToTable("PrivateSigningPromoterProvidedItem");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectBaseball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseballTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectBaseball");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectCard");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectHallOfFame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SportLeagueLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectHallOfFame");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectHelmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HelmetFinishId")
                        .HasColumnType("int");

                    b.Property<int>("HelmetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectHelmet");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("MultiSignedItem")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectItem");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectMemorabiliaTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("Upgrade")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.ToTable("ProjectMemorabiliaTeam");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutographId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<bool>("Upgrade")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AutographId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectTeam");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectWorldSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectWorldSeries");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PromoterProvidedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PromoterId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("PromoterId");

                    b.ToTable("PromoterProvidedItem");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProposeTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountTradeCreatorToReceive")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountTradeCreatorToSend")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProposeTradeStatusTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProposedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TradeCreatorUserId")
                        .HasColumnType("int");

                    b.Property<int>("TradePartnerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeCreatorUserId");

                    b.HasIndex("TradePartnerUserId");

                    b.ToTable("ProposeTrade");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProposeTradeMemorabilia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("ProposeTradeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("ProposeTradeId");

                    b.HasIndex("UserId");

                    b.ToTable("ProposeTradeMemorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.RetiredNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PersonId");

                    b.ToTable("RetiredNumber");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("SignatureIdentification");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentificationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignatureIdentificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SignatureIdentificationId");

                    b.ToTable("SignatureIdentificationImage");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentificationPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SignatureIdentificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SignatureIdentificationId");

                    b.ToTable("SignatureIdentificationPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PersonId");

                    b.ToTable("SignatureReview");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReviewImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignatureReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SignatureReviewId");

                    b.ToTable("SignatureReviewImage");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReviewUserResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignatureReviewId")
                        .HasColumnType("int");

                    b.Property<int>("SignatureReviewResultTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SignatureReviewId");

                    b.ToTable("SignatureReviewUserResult");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SingleSeasonRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Record")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("SingleSeasonRecord");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SportLeagueLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SportLeagueLevel");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SportService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DebutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FreeAgentSigningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAppearanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("SportService");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamConference");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamDivision");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginYear")
                        .HasColumnType("int");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamLeague");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ThroughTheMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelfAddressedStampedEnvelopeTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ThroughTheMailFailureTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("ThroughTheMail");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ThroughTheMailMemorabilia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutographId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<bool>("IsExtraReceived")
                        .HasColumnType("bit");

                    b.Property<int>("MemorabiliaId")
                        .HasColumnType("int");

                    b.Property<int>("ThroughTheMailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutographId")
                        .IsUnique()
                        .HasFilter("[AutographId] IS NOT NULL");

                    b.HasIndex("MemorabiliaId");

                    b.HasIndex("ThroughTheMailId");

                    b.ToTable("ThroughTheMailMemorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionCanceled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubscriptionExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DashboardItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDashboard");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserPaymentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentOptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentOption");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GoogleEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MicrosoftEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<bool>("UseDarkTheme")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("XHandle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserSocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Handle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialMediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialMedia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AllStar", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("AllStars")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Autograph", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Acquisition", "Acquisition")
                        .WithMany()
                        .HasForeignKey("AcquisitionId");

                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany("Autographs")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acquisition");

                    b.Navigation("Memorabilia");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographAuthentication", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", null)
                        .WithMany("Authentications")
                        .HasForeignKey("AutographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographImage", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", null)
                        .WithMany("Images")
                        .HasForeignKey("AutographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.AutographSpot", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", null)
                        .WithOne("Spot")
                        .HasForeignKey("Memorabilia.Domain.Entities.AutographSpot", "AutographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CareerRecord", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("CareerRecords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Champion", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany("Championships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollectionMemorabilia", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Collection", "Collection")
                        .WithMany("Memorabilia")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany("CollectionMemorabilias")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollegeHallOfFame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("CollegeHallOfFames")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Person");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.CollegeRetiredNumber", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.College", "College")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("CollegeRetiredNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Draft", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Drafts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ForumTopicUserBookmark", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "User")
                        .WithMany("BookmarkedForumTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Franchise", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.SportLeagueLevel", "SportLeagueLevel")
                        .WithMany()
                        .HasForeignKey("SportLeagueLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportLeagueLevel");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.FranchiseHallOfFame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("FranchiseHallOfFames")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.HallOfFame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("HallOfFames")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Inscription", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", null)
                        .WithMany("Inscriptions")
                        .HasForeignKey("AutographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.InternationalHallOfFame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("InternationalHallOfFames")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Leader", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Leaders")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Memorabilia", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaAcquisition", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Acquisition", "Acquisition")
                        .WithMany()
                        .HasForeignKey("AcquisitionId");

                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("MemorabiliaAcquisition")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaAcquisition", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acquisition");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBammer", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Bammer")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBammer", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBaseball", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Baseball")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBaseball", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBasketball", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Basketball")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBasketball", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBat", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Bat")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBat", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBobblehead", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Bobblehead")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBobblehead", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBook", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Book")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBook", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaBrand", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Brand")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaBrand", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCard", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Card")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaCard", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCereal", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Cereal")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaCereal", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaCommissioner", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Commissioner")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaCommissioner", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFigure", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Figure")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaFigure", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFirstDayCover", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("FirstDayCover")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaFirstDayCover", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaFootball", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Football")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaFootball", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaForSale", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithOne("ForSale")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaForSale", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaGame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Game")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaGame", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaGlove", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Glove")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaGlove", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaHelmet", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Helmet")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaHelmet", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaImage", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithMany("Images")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaJersey", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Jersey")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaJersey", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaJerseyNumber", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("JerseyNumber")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaJerseyNumber", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaLevelType", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("LevelType")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaLevelType", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaMagazine", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Magazine")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaMagazine", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaPerson", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithMany("People")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaPicture", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Picture")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaPicture", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaSize", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithOne("Size")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaSize", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaSport", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithMany("Sports")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTeam", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", null)
                        .WithMany("Teams")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransactionSale", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithOne("Sale")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaTransactionSale", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.MemorabiliaTransaction", "Transaction")
                        .WithMany("Sales")
                        .HasForeignKey("MemorabiliaTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memorabilia");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransactionTrade", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithOne("Trade")
                        .HasForeignKey("Memorabilia.Domain.Entities.MemorabiliaTransactionTrade", "MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.MemorabiliaTransaction", "Transaction")
                        .WithMany("Trades")
                        .HasForeignKey("MemorabiliaTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memorabilia");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Offer", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "BuyerUser")
                        .WithMany()
                        .HasForeignKey("BuyerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany()
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.User", "SellerUser")
                        .WithMany()
                        .HasForeignKey("SellerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerUser");

                    b.Navigation("Memorabilia");

                    b.Navigation("SellerUser");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonAccomplishment", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Accomplishments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonAward", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Awards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonCollege", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Colleges")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonNickname", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", null)
                        .WithMany("Nicknames")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonOccupation", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Occupations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonPosition", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", null)
                        .WithMany("Positions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonSport", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", null)
                        .WithMany("Sports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PersonTeam", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Personalization", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", null)
                        .WithOne("Personalization")
                        .HasForeignKey("Memorabilia.Domain.Entities.Personalization", "AutographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigning", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningAuthenticationCompany", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigning", "PrivateSigning")
                        .WithMany("AuthenticationCompanies")
                        .HasForeignKey("PrivateSigningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateSigning");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemGroup", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemTypeGroup", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningCustomItemGroup", "PrivateSigningCustomItemGroup")
                        .WithMany()
                        .HasForeignKey("PrivateSigningCustomItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateSigningCustomItemGroup");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningCustomItemTypeGroupDetail", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningCustomItemGroup", "PrivateSigningCustomItemGroup")
                        .WithMany()
                        .HasForeignKey("PrivateSigningCustomItemGroupId");

                    b.Navigation("PrivateSigningCustomItemGroup");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPerson", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigning", "PrivateSigning")
                        .WithMany("People")
                        .HasForeignKey("PrivateSigningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PrivateSigning");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPersonDetail", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningCustomItemTypeGroupDetail", "PrivateSigningCustomItemTypeGroupDetail")
                        .WithMany()
                        .HasForeignKey("PrivateSigningCustomItemTypeGroupDetailId");

                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningItemTypeGroup", "PrivateSigningItemTypeGroup")
                        .WithMany()
                        .HasForeignKey("PrivateSigningItemTypeGroupId");

                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningPerson", "PrivateSigningPerson")
                        .WithMany("Pricing")
                        .HasForeignKey("PrivateSigningPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateSigningCustomItemTypeGroupDetail");

                    b.Navigation("PrivateSigningItemTypeGroup");

                    b.Navigation("PrivateSigningPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPersonExcludeItemType", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigningPerson", "PrivateSigningPerson")
                        .WithMany("ExcludedItems")
                        .HasForeignKey("PrivateSigningPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateSigningPerson");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPromoterProvidedItem", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.PrivateSigning", "PrivateSigning")
                        .WithMany("PromoterProvidedItems")
                        .HasForeignKey("PrivateSigningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.PromoterProvidedItem", "PromoterProvidedItem")
                        .WithMany()
                        .HasForeignKey("PromoterProvidedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateSigning");

                    b.Navigation("PromoterProvidedItem");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectBaseball", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("Baseball")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectBaseball", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectCard", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("Card")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectCard", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectHallOfFame", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("HallOfFame")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectHallOfFame", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectHelmet", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("Helmet")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectHelmet", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectItem", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("Item")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectItem", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectMemorabiliaTeam", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany()
                        .HasForeignKey("MemorabiliaId");

                    b.HasOne("Memorabilia.Domain.Entities.Project", "Project")
                        .WithMany("MemorabiliaTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memorabilia");

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectPerson", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", "Autograph")
                        .WithMany()
                        .HasForeignKey("AutographId");

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Project", "Project")
                        .WithMany("People")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autograph");

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectTeam", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("Team")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectTeam", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProjectWorldSeries", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Project", null)
                        .WithOne("WorldSeries")
                        .HasForeignKey("Memorabilia.Domain.Entities.ProjectWorldSeries", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PromoterProvidedItem", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.User", "Promoter")
                        .WithMany()
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");

                    b.Navigation("Promoter");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProposeTrade", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "TradeCreatorUser")
                        .WithMany()
                        .HasForeignKey("TradeCreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.User", "TradePartnerUser")
                        .WithMany()
                        .HasForeignKey("TradePartnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeCreatorUser");

                    b.Navigation("TradePartnerUser");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProposeTradeMemorabilia", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany()
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.ProposeTrade", null)
                        .WithMany("Memorabilia")
                        .HasForeignKey("ProposeTradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memorabilia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.RetiredNumber", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("RetiredNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentification", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentificationImage", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.SignatureIdentification", "SignatureIdentification")
                        .WithMany("Images")
                        .HasForeignKey("SignatureIdentificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignatureIdentification");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentificationPerson", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.SignatureIdentification", "SignatureIdentification")
                        .WithMany("People")
                        .HasForeignKey("SignatureIdentificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Person");

                    b.Navigation("SignatureIdentification");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReview", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReviewImage", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.SignatureReview", "SignatureReview")
                        .WithMany("Images")
                        .HasForeignKey("SignatureReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignatureReview");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReviewUserResult", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.SignatureReview", "SignatureReview")
                        .WithMany("UserResults")
                        .HasForeignKey("SignatureReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("SignatureReview");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SingleSeasonRecord", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany("SingleSeasonRecords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SportService", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Person", null)
                        .WithOne("Service")
                        .HasForeignKey("Memorabilia.Domain.Entities.SportService", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Team", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Franchise", "Franchise")
                        .WithMany()
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamConference", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany("Conferences")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamDivision", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany("Divisions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.TeamLeague", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Team", "Team")
                        .WithMany("Leagues")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ThroughTheMail", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Memorabilia.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ThroughTheMailMemorabilia", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Autograph", "Autograph")
                        .WithOne("ThroughTheMailMemorabilia")
                        .HasForeignKey("Memorabilia.Domain.Entities.ThroughTheMailMemorabilia", "AutographId");

                    b.HasOne("Memorabilia.Domain.Entities.Memorabilia", "Memorabilia")
                        .WithMany("ThroughTheMailMemorabilias")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.ThroughTheMail", null)
                        .WithMany("Memorabilia")
                        .HasForeignKey("ThroughTheMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autograph");

                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserDashboard", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", null)
                        .WithMany("DashboardItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserPaymentOption", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", null)
                        .WithMany("PaymentOptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memorabilia.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserSettings", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("Memorabilia.Domain.Entities.User", null)
                        .WithOne("UserSettings")
                        .HasForeignKey("Memorabilia.Domain.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.UserSocialMedia", b =>
                {
                    b.HasOne("Memorabilia.Domain.Entities.User", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Autograph", b =>
                {
                    b.Navigation("Authentications");

                    b.Navigation("Images");

                    b.Navigation("Inscriptions");

                    b.Navigation("Personalization");

                    b.Navigation("Spot");

                    b.Navigation("ThroughTheMailMemorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Collection", b =>
                {
                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Memorabilia", b =>
                {
                    b.Navigation("Autographs");

                    b.Navigation("Bammer");

                    b.Navigation("Baseball");

                    b.Navigation("Basketball");

                    b.Navigation("Bat");

                    b.Navigation("Bobblehead");

                    b.Navigation("Book");

                    b.Navigation("Brand");

                    b.Navigation("Card");

                    b.Navigation("Cereal");

                    b.Navigation("CollectionMemorabilias");

                    b.Navigation("Commissioner");

                    b.Navigation("Figure");

                    b.Navigation("FirstDayCover");

                    b.Navigation("Football");

                    b.Navigation("ForSale");

                    b.Navigation("Game");

                    b.Navigation("Glove");

                    b.Navigation("Helmet");

                    b.Navigation("Images");

                    b.Navigation("Jersey");

                    b.Navigation("JerseyNumber");

                    b.Navigation("LevelType");

                    b.Navigation("Magazine");

                    b.Navigation("MemorabiliaAcquisition");

                    b.Navigation("People");

                    b.Navigation("Picture");

                    b.Navigation("Sale");

                    b.Navigation("Size");

                    b.Navigation("Sports");

                    b.Navigation("Teams");

                    b.Navigation("ThroughTheMailMemorabilias");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.MemorabiliaTransaction", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Person", b =>
                {
                    b.Navigation("Accomplishments");

                    b.Navigation("AllStars");

                    b.Navigation("Awards");

                    b.Navigation("CareerRecords");

                    b.Navigation("CollegeHallOfFames");

                    b.Navigation("CollegeRetiredNumbers");

                    b.Navigation("Colleges");

                    b.Navigation("Drafts");

                    b.Navigation("FranchiseHallOfFames");

                    b.Navigation("HallOfFames");

                    b.Navigation("InternationalHallOfFames");

                    b.Navigation("Leaders");

                    b.Navigation("Nicknames");

                    b.Navigation("Occupations");

                    b.Navigation("Positions");

                    b.Navigation("RetiredNumbers");

                    b.Navigation("Service");

                    b.Navigation("SingleSeasonRecords");

                    b.Navigation("Sports");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigning", b =>
                {
                    b.Navigation("AuthenticationCompanies");

                    b.Navigation("People");

                    b.Navigation("PromoterProvidedItems");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.PrivateSigningPerson", b =>
                {
                    b.Navigation("ExcludedItems");

                    b.Navigation("Pricing");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Project", b =>
                {
                    b.Navigation("Baseball");

                    b.Navigation("Card");

                    b.Navigation("HallOfFame");

                    b.Navigation("Helmet");

                    b.Navigation("Item");

                    b.Navigation("MemorabiliaTeams");

                    b.Navigation("People");

                    b.Navigation("Team");

                    b.Navigation("WorldSeries");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ProposeTrade", b =>
                {
                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureIdentification", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.SignatureReview", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("UserResults");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.Team", b =>
                {
                    b.Navigation("Championships");

                    b.Navigation("Conferences");

                    b.Navigation("Divisions");

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.ThroughTheMail", b =>
                {
                    b.Navigation("Memorabilia");
                });

            modelBuilder.Entity("Memorabilia.Domain.Entities.User", b =>
                {
                    b.Navigation("BookmarkedForumTopics");

                    b.Navigation("DashboardItems");

                    b.Navigation("PaymentOptions");

                    b.Navigation("Roles");

                    b.Navigation("SocialMedias");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
