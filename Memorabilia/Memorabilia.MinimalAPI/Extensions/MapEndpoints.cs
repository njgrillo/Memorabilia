namespace Memorabilia.MinimalAPI.Extensions;

public static class MapEndpoints
{
    public static void MapDomainEndpoints(this WebApplication app)
    {
        app.MediateGet<AccomplishmentTypeRequest>("accomplishmentType/{id}");
        app.MediateGet<AccomplishmentTypesRequest>("accomplishmentTypes");
        app.MediateGet<AcquisitionTypeRequest>("acquisitionType/{id}");
        app.MediateGet<AcquisitionTypesRequest>("acquisitionTypes");
        app.MediateGet<AuthenticationCompanyRequest>("authenticationCompany/{id}");
        app.MediateGet<AuthenticationCompaniesRequest>("authenticationCompanies");
        app.MediateGet<AwardTypeRequest>("awardType/{id}");
        app.MediateGet<AwardTypesRequest>("awardTypes");
        app.MediateGet<BammerTypeRequest>("bammerType/{id}");
        app.MediateGet<BammerTypesRequest>("bammerTypes");
        app.MediateGet<BaseballTypeRequest>("baseballType/{id}");
        app.MediateGet<BaseballTypesRequest>("baseballTypes");
        app.MediateGet<BasketballTypeRequest>("basketballType/{id}");
        app.MediateGet<BasketballTypesRequest>("basketballTypes");
        app.MediateGet<BatTypeRequest>("batType/{id}");
        app.MediateGet<BatTypesRequest>("batTypes");
        app.MediateGet<BrandRequest>("brand/{id}");
        app.MediateGet<BrandsRequest>("brands");
        app.MediateGet<CerealTypeRequest>("cerealType/{id}");
        app.MediateGet<CerealTypesRequest>("cerealTypes");
        app.MediateGet<ChampionTypeRequest>("championType/{id}");
        app.MediateGet<ChampionTypesRequest>("championTypes");
        app.MediateGet<CollegeRequest>("college/{id}");
        app.MediateGet<CollegesRequest>("colleges");
        app.MediateGet<ColorRequest>("color/{id}");
        app.MediateGet<ColorsRequest>("colors");
        app.MediateGet<CommissionerRequest>("commissioner/{id}");
        app.MediateGet<CommissionersRequest>("commissioners");
        app.MediateGet<ConditionRequest>("condition/{id}");
        app.MediateGet<ConditionsRequest>("conditions");
        app.MediateGet<ConferenceRequest>("conference/{id}");
        app.MediateGet<ConferencesRequest>("conferences");
        app.MediateGet<DivisionRequest>("division/{id}");
        app.MediateGet<DivisionsRequest>("divisions");
        app.MediateGet<FigureSpecialtyTypeRequest>("figureSpecialtyType/{id}");
        app.MediateGet<FigureSpecialtyTypesRequest>("figureSpecialtyTypes");
        app.MediateGet<FigureTypeRequest>("figureType/{id}");
        app.MediateGet<FigureTypesRequest>("figureTypes");
        app.MediateGet<FootballTypeRequest>("footballType/{id}");
        app.MediateGet<FootballTypesRequest>("footballTypes");
        app.MediateGet<FranchiseHallOfFameTypeRequest>("franchiseHallOfFameType/{id}");
        app.MediateGet<FranchiseHallOfFameTypesRequest>("franchiseHallOfFameTypes");
        app.MediateGet<FranchiseRequest>("franchise/{id}");
        app.MediateGet<FranchisesRequest>("franchises");
        app.MediateGet<GameStyleTypeRequest>("gameStyleType/{id}");
        app.MediateGet<GameStyleTypesRequest>("gameStyleTypes");
        app.MediateGet<GloveTypeRequest>("gloveType/{id}");
        app.MediateGet<GloveTypesRequest>("gloveTypes");
        app.MediateGet<HelmetFinishRequest>("helmetFinish/{id}");
        app.MediateGet<HelmetFinishesRequest>("helmetFinishes");
        app.MediateGet<HelmetQualityTypeRequest>("helmetQualityType/{id}");
        app.MediateGet<HelmetQualityTypesRequest>("helmetQualityTypes");
        app.MediateGet<HelmetTypeRequest>("helmetType/{id}");
        app.MediateGet<HelmetTypesRequest>("helmetTypes");
        app.MediateGet<ImageTypeRequest>("imageType/{id}");
        app.MediateGet<ImageTypesRequest>("imageTypes");
        app.MediateGet<InscriptionTypeRequest>("inscriptionType/{id}");
        app.MediateGet<InscriptionTypesRequest>("inscriptionTypes");
        app.MediateGet<InternationalHallOfFameTypeRequest>("internationalHallOfFameType/{id}");
        app.MediateGet<InternationalHallOfFameTypesRequest>("internationalHallOfFameTypes");
        app.MediateGet<ItemTypeBrandRequest>("itemTypeBrand/{id}");
        app.MediateGet<ItemTypeBrandsRequest>("itemTypeBrands");
        app.MediateGet<ItemTypeGameStyleRequest>("itemTypeGameStyle/{id}");
        app.MediateGet<ItemTypeGameStylesRequest>("itemTypeGameStyles");
        app.MediateGet<ItemTypeLevelRequest>("itemTypeLevel/{id}");
        app.MediateGet<ItemTypeLevelsRequest>("itemTypeLevels");
        app.MediateGet<ItemTypeRequest>("itemType/{id}");
        app.MediateGet<ItemTypesRequest>("itemTypes");
        app.MediateGet<ItemTypeSizeRequest>("itemTypeSize/{id}");
        app.MediateGet<ItemTypeSizesRequest>("itemTypeSizes");
        app.MediateGet<ItemTypeSportRequest>("itemTypeSport/{id}");
        app.MediateGet<ItemTypeSportsRequest>("itemTypeSports");
        app.MediateGet<ItemTypeSpotRequest>("itemTypeSpot/{id}");
        app.MediateGet<ItemTypeSpotsRequest>("itemTypeSpots");
        app.MediateGet<JerseyQualityTypeRequest>("jerseyQualityType/{id}");
        app.MediateGet<JerseyQualityTypesRequest>("jerseyQualityTypes");
        app.MediateGet<JerseyStyleTypeRequest>("jerseyStyleType/{id}");
        app.MediateGet<JerseyStyleTypesRequest>("jerseyStyleTypes");
        app.MediateGet<JerseyTypeRequest>("jerseyType/{id}");
        app.MediateGet<JerseyTypesRequest>("jerseyTypes");
        app.MediateGet<LeaderTypeRequest>("leaderType/{id}");
        app.MediateGet<LeaderTypesRequest>("leaderTypes");
        app.MediateGet<LeaguePresidentRequest>("leaguePresident/{id}");
        app.MediateGet<LeaguePresidentsRequest>("leaguePresidents");
        app.MediateGet<LeagueRequest>("league/{id}");
        app.MediateGet<LeaguesRequest>("leagues");
        app.MediateGet<LevelTypeRequest>("levelType/{id}");
        app.MediateGet<LevelTypesRequest>("levelTypes");
        app.MediateGet<MagazineTypeRequest>("magazineType/{id}");
        app.MediateGet<MagazineTypesRequest>("magazineTypes");
        app.MediateGet<OccupationRequest>("occupation/{id}");
        app.MediateGet<OccupationsRequest>("occupations");
        app.MediateGet<OrientationRequest>("orientation/{id}");
        app.MediateGet<OrientationsRequest>("orientations");
        app.MediateGet<PersonRequest>("person/{id}");
        app.MediateGet<PersonsRequest>("persons");
        app.MediateGet<PewterRequest>("pewter/{id}");
        app.MediateGet<PewtersRequest>("pewters");
        app.MediateGet<PhotoTypeRequest>("photoType/{id}");
        app.MediateGet<PhotoTypesRequest>("photoTypes");
        app.MediateGet<PositionRequest>("position/{id}");
        app.MediateGet<PositionsRequest>("positions");
        app.MediateGet<PriorityTypeRequest>("priorityType/{id}");
        app.MediateGet<PriorityTypesRequest>("priorityTypes");
        app.MediateGet<PrivacyTypeRequest>("privacyType/{id}");
        app.MediateGet<PrivacyTypesRequest>("privacyTypes");
        app.MediateGet<ProjectStatusTypeRequest>("projectStatusType/{id}");
        app.MediateGet<ProjectStatusTypesRequest>("projectStatusTypes");
        app.MediateGet<ProjectTypeRequest>("projectType/{id}");
        app.MediateGet<ProjectTypesRequest>("projectTypes");
        app.MediateGet<PurchaseTypeRequest>("purchaseType/{id}");
        app.MediateGet<PurchaseTypesRequest>("purchaseTypes");
        app.MediateGet<RecordTypeRequest>("recordType/{id}");
        app.MediateGet<RecordTypesRequest>("recordTypes");
        app.MediateGet<SizeRequest>("size/{id}");
        app.MediateGet<SizesRequest>("sizes");
        app.MediateGet<SportLeagueLevelRequest>("sportLeagueLevel/{id}");
        app.MediateGet<SportLeagueLevelsRequest>("sportLeagueLevels");
        app.MediateGet<SportRequest>("sport/{id}");
        app.MediateGet<SportsRequest>("sports");
        app.MediateGet<SpotRequest>("spot/{id}");
        app.MediateGet<SpotsRequest>("spots");
        app.MediateGet<TeamRoleTypeRequest>("teamRoleType/{id}");
        app.MediateGet<TeamRoleTypesRequest>("teamRoleTypes");
        app.MediateGet<TeamRequest>("team/{id}");
        app.MediateGet<TeamsRequest>("teams");
        app.MediateGet<WritingInstrumentRequest>("writingInstrument/{id}");
        app.MediateGet<WritingInstrumentsRequest>("writingInstruments");
    }
}
